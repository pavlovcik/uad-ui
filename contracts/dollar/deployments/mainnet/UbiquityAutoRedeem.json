{
  "address": "0x5894cFEbFdEdBe61d01F20140f41c5c49AedAe97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_burned",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Burning",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Minting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract UbiquityAlgorithmicDollarManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "raiseCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newSymbol",
          "type": "string"
        }
      ],
      "name": "setSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4ed6ed8c96a542735a4d0d94bca2b8f3fed8d978095f713005f7a12d8f46bf1",
  "receipt": {
    "to": null,
    "from": "0xefC0e701A824943b469a694aC564Aa1efF7Ab7dd",
    "contractAddress": "0x5894cFEbFdEdBe61d01F20140f41c5c49AedAe97",
    "transactionIndex": 117,
    "gasUsed": "1892105",
    "logsBloom": "0x
    "blockHash": "0x902b4ab8ea91c8ef15bbf70efa199e0b980b6a015b06b62402437d3c4e35458b",
    "transactionHash": "0xf4ed6ed8c96a542735a4d0d94bca2b8f3fed8d978095f713005f7a12d8f46bf1",
    "logs": [],
    "blockNumber": 12595462,
    "cumulativeGasUsed": "5458881",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x4DA97a8b831C345dBe6d16FF7432DF2b7b776d98"],
  "solcInputHash": "718dfe5f2e9bb98c22443f71ab0527e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_burned\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Minting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract UbiquityAlgorithmicDollarManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"raiseCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"amount\":\"the amount to burn\"}},\"burnFrom(address,uint256)\":{\"params\":{\"account\":\"the account to burn from\",\"amount\":\"the amount to burn\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"the deadline after which the approval is no longer valid\",\"owner\":\"the uAD holder\",\"spender\":\"the approved operator\",\"value\":\"the amount approved\"}},\"raiseCapital(uint256)\":{\"details\":\"you should be minter to call that function\",\"params\":{\"amount\":\"the amount to be minted\"}},\"setName(string)\":{\"params\":{\"newName\":\"new token name\"}},\"setSymbol(string)\":{\"params\":{\"newSymbol\":\"new token symbol\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"burn UAD tokens from caller\"},\"burnFrom(address,uint256)\":{\"notice\":\"burn uAD tokens from specified account\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"permit spending of uAD. owner has signed a message allowing         spender to transfer up to amount uAD\"},\"raiseCapital(uint256)\":{\"notice\":\"raise capital in form of uAR (only redeemable when uAD > 1$)\"},\"setName(string)\":{\"notice\":\"setName update token name\"},\"setSymbol(string)\":{\"notice\":\"setSymbol update token symbol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UbiquityAutoRedeem.sol\":\"UbiquityAutoRedeem\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        _approve(account, _msgSender(), currentAllowance - amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb8cc16fa5514ccbff1123c566ec0a21682f1ded0ca7e5df719c6bd0b7429390a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x86b0abb859d38e6909101e8dce6fad76543cd1443788b049fd182379b42cb6e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ERC20Ubiquity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\nimport \\\"./UbiquityAlgorithmicDollarManager.sol\\\";\\nimport \\\"./interfaces/IERC20Ubiquity.sol\\\";\\n\\n/// @title ERC20 Ubiquity preset\\n/// @author Ubiquity Algorithmic Dollar\\n/// @notice ERC20 with :\\n/// - ERC20 minter, burner and pauser\\n/// - draft-ERC20 permit\\n/// - Ubiquity Manager access control\\ncontract ERC20Ubiquity is IERC20Ubiquity, ERC20, ERC20Burnable, ERC20Pausable {\\n    UbiquityAlgorithmicDollarManager public manager;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,\\n    //                   uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n    string private _tokenName;\\n    string private _symbol;\\n\\n    // ----------- Modifiers -----------\\n    modifier onlyMinter() {\\n        require(\\n            manager.hasRole(manager.UBQ_MINTER_ROLE(), msg.sender),\\n            \\\"Governance token: not minter\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(\\n            manager.hasRole(manager.UBQ_BURNER_ROLE(), msg.sender),\\n            \\\"Governance token: not burner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(\\n            manager.hasRole(manager.PAUSER_ROLE(), msg.sender),\\n            \\\"Governance token: not pauser\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            manager.hasRole(manager.DEFAULT_ADMIN_ROLE(), msg.sender),\\n            \\\"ERC20: deployer must be manager admin\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _manager,\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC20(name_, symbol_) {\\n        _tokenName = name_;\\n        _symbol = symbol_;\\n        manager = UbiquityAlgorithmicDollarManager(_manager);\\n        // sender must be UbiquityAlgorithmicDollarManager roleAdmin\\n        // because he will get the admin, minter and pauser role on uAD and we want to\\n        // manage all permissions through the manager\\n        require(\\n            manager.hasRole(manager.DEFAULT_ADMIN_ROLE(), msg.sender),\\n            \\\"ERC20: deployer must be manager admin\\\"\\n        );\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    // solhint-disable-next-line max-line-length\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @notice setSymbol update token symbol\\n    /// @param newSymbol new token symbol\\n    function setSymbol(string memory newSymbol) external onlyAdmin {\\n        _symbol = newSymbol;\\n    }\\n\\n    /// @notice setName update token name\\n    /// @param newName new token name\\n    function setName(string memory newName) external onlyAdmin {\\n        _tokenName = newName;\\n    }\\n\\n    /// @notice permit spending of uAD. owner has signed a message allowing\\n    ///         spender to transfer up to amount uAD\\n    /// @param owner the uAD holder\\n    /// @param spender the approved operator\\n    /// @param value the amount approved\\n    /// @param deadline the deadline after which the approval is no longer valid\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(deadline >= block.timestamp, \\\"Dollar: EXPIRED\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Dollar: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n\\n    /// @notice burn UAD tokens from caller\\n    /// @param amount the amount to burn\\n    function burn(uint256 amount)\\n        public\\n        override(ERC20Burnable, IERC20Ubiquity)\\n        whenNotPaused\\n    {\\n        super.burn(amount);\\n        emit Burning(msg.sender, amount);\\n    }\\n\\n    /// @notice burn uAD tokens from specified account\\n    /// @param account the account to burn from\\n    /// @param amount the amount to burn\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override(ERC20Burnable, IERC20Ubiquity)\\n        onlyBurner\\n        whenNotPaused // to suppress ? if BURNER_ROLE should do it even paused ?\\n    {\\n        _burn(account, amount);\\n        emit Burning(account, amount);\\n    }\\n\\n    // @dev Creates `amount` new tokens for `to`.\\n    function mint(address to, uint256 amount)\\n        public\\n        override\\n        onlyMinter\\n        whenNotPaused\\n    {\\n        _mint(to, amount);\\n        emit Minting(to, msg.sender, amount);\\n    }\\n\\n    // @dev Pauses all token transfers.\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    // @dev Unpauses all token transfers.\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view override(ERC20) returns (string memory) {\\n        return _tokenName;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view override(ERC20) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override whenNotPaused {\\n        super._transfer(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x131a8776645c08696d9aa7c4ff1d6c1bd69a899f67392556b64c6b9de7e302da\",\"license\":\"MIT\"},\"contracts/TWAPOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IMetaPool.sol\\\";\\n\\ncontract TWAPOracle {\\n    address public immutable pool;\\n    address public immutable token0;\\n    address public immutable token1;\\n    uint256 public price0Average;\\n    uint256 public price1Average;\\n    uint256 public pricesBlockTimestampLast;\\n    uint256[2] public priceCumulativeLast;\\n\\n    constructor(\\n        address _pool,\\n        address _uADtoken0,\\n        address _curve3CRVtoken1\\n    ) {\\n        pool = _pool;\\n        // coin at index 0 is uAD and index 1 is 3CRV\\n        require(\\n            IMetaPool(_pool).coins(0) == _uADtoken0 &&\\n                IMetaPool(_pool).coins(1) == _curve3CRVtoken1,\\n            \\\"TWAPOracle: COIN_ORDER_MISMATCH\\\"\\n        );\\n\\n        token0 = _uADtoken0;\\n        token1 = _curve3CRVtoken1;\\n\\n        uint256 _reserve0 = uint112(IMetaPool(_pool).balances(0));\\n        uint256 _reserve1 = uint112(IMetaPool(_pool).balances(1));\\n\\n        // ensure that there's liquidity in the pair\\n        require(_reserve0 != 0 && _reserve1 != 0, \\\"TWAPOracle: NO_RESERVES\\\");\\n        // ensure that pair balance is perfect\\n        require(_reserve0 == _reserve1, \\\"TWAPOracle: PAIR_UNBALANCED\\\");\\n        priceCumulativeLast = IMetaPool(_pool).get_price_cumulative_last();\\n        pricesBlockTimestampLast = IMetaPool(_pool).block_timestamp_last();\\n\\n        price0Average = 1 ether;\\n        price1Average = 1 ether;\\n    }\\n\\n    // calculate average price\\n    function update() external {\\n        (uint256[2] memory priceCumulative, uint256 blockTimestamp) =\\n            _currentCumulativePrices();\\n\\n        if (blockTimestamp - pricesBlockTimestampLast > 0) {\\n            // get the balances between now and the last price cumulative snapshot\\n            uint256[2] memory twapBalances =\\n                IMetaPool(pool).get_twap_balances(\\n                    priceCumulativeLast,\\n                    priceCumulative,\\n                    blockTimestamp - pricesBlockTimestampLast\\n                );\\n\\n            // price to exchange amounIn uAD to 3CRV based on TWAP\\n            price0Average = IMetaPool(pool).get_dy(0, 1, 1 ether, twapBalances);\\n            // price to exchange amounIn 3CRV to uAD  based on TWAP\\n            price1Average = IMetaPool(pool).get_dy(1, 0, 1 ether, twapBalances);\\n            // we update the priceCumulative\\n            priceCumulativeLast = priceCumulative;\\n            pricesBlockTimestampLast = blockTimestamp;\\n        }\\n    }\\n\\n    // note this will always return 0 before update has been called successfully\\n    // for the first time.\\n    function consult(address token) external view returns (uint256 amountOut) {\\n        if (token == token0) {\\n            // price to exchange 1 uAD to 3CRV based on TWAP\\n            amountOut = price0Average;\\n        } else {\\n            require(token == token1, \\\"TWAPOracle: INVALID_TOKEN\\\");\\n            // price to exchange 1 3CRV to uAD  based on TWAP\\n            amountOut = price1Average;\\n        }\\n    }\\n\\n    function _currentCumulativePrices()\\n        internal\\n        view\\n        returns (uint256[2] memory priceCumulative, uint256 blockTimestamp)\\n    {\\n        priceCumulative = IMetaPool(pool).get_price_cumulative_last();\\n        blockTimestamp = IMetaPool(pool).block_timestamp_last();\\n    }\\n}\\n\",\"keccak256\":\"0x24313b9e13825536130e9619cc0f3188e8ac3b1dd8199a1df5ea2d8ad0d28939\",\"license\":\"Apache-2.0\"},\"contracts/UbiquityAlgorithmicDollarManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IUbiquityAlgorithmicDollar.sol\\\";\\nimport \\\"./interfaces/ICurveFactory.sol\\\";\\nimport \\\"./interfaces/IMetaPool.sol\\\";\\n\\nimport \\\"./TWAPOracle.sol\\\";\\n\\n/// @title A central config for the uAD system. Also acts as a central\\n/// access control manager.\\n/// @notice For storing constants. For storing variables and allowing them to\\n/// be changed by the admin (governance)\\n/// @dev This should be used as a central access control manager which other\\n/// contracts use to check permissions\\ncontract UbiquityAlgorithmicDollarManager is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant UBQ_MINTER_ROLE = keccak256(\\\"UBQ_MINTER_ROLE\\\");\\n    bytes32 public constant UBQ_BURNER_ROLE = keccak256(\\\"UBQ_BURNER_ROLE\\\");\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant COUPON_MANAGER_ROLE = keccak256(\\\"COUPON_MANAGER\\\");\\n    bytes32 public constant BONDING_MANAGER_ROLE = keccak256(\\\"BONDING_MANAGER\\\");\\n    bytes32 public constant INCENTIVE_MANAGER_ROLE =\\n        keccak256(\\\"INCENTIVE_MANAGER\\\");\\n    bytes32 public constant UBQ_TOKEN_MANAGER_ROLE =\\n        keccak256(\\\"UBQ_TOKEN_MANAGER_ROLE\\\");\\n    address public twapOracleAddress;\\n    address public debtCouponAddress;\\n    address public dollarTokenAddress; // uAD\\n    address public couponCalculatorAddress;\\n    address public dollarMintingCalculatorAddress;\\n    address public bondingShareAddress;\\n    address public bondingContractAddress;\\n    address public stableSwapMetaPoolAddress;\\n    address public curve3PoolTokenAddress; // 3CRV\\n    address public treasuryAddress;\\n    address public governanceTokenAddress; // uGOV\\n    address public sushiSwapPoolAddress; // sushi pool uAD-uGOV\\n    address public masterChefAddress;\\n    address public formulasAddress;\\n    address public autoRedeemTokenAddress; // uAR\\n    address public uarCalculatorAddress; // uAR calculator\\n\\n    //key = address of couponmanager, value = excessdollardistributor\\n    mapping(address => address) private _excessDollarDistributors;\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"uADMGR: Caller is not admin\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(UBQ_MINTER_ROLE, _admin);\\n        _setupRole(PAUSER_ROLE, _admin);\\n        _setupRole(COUPON_MANAGER_ROLE, _admin);\\n        _setupRole(BONDING_MANAGER_ROLE, _admin);\\n        _setupRole(INCENTIVE_MANAGER_ROLE, _admin);\\n        _setupRole(UBQ_TOKEN_MANAGER_ROLE, address(this));\\n    }\\n\\n    // TODO Add a generic setter for extra addresses that needs to be linked\\n    function setTwapOracleAddress(address _twapOracleAddress)\\n        external\\n        onlyAdmin\\n    {\\n        twapOracleAddress = _twapOracleAddress;\\n        // to be removed\\n\\n        TWAPOracle oracle = TWAPOracle(twapOracleAddress);\\n        oracle.update();\\n    }\\n\\n    function setuARTokenAddress(address _uarTokenAddress) external onlyAdmin {\\n        autoRedeemTokenAddress = _uarTokenAddress;\\n    }\\n\\n    function setDebtCouponAddress(address _debtCouponAddress)\\n        external\\n        onlyAdmin\\n    {\\n        debtCouponAddress = _debtCouponAddress;\\n    }\\n\\n    function setIncentiveToUAD(address _account, address _incentiveAddress)\\n        external\\n        onlyAdmin\\n    {\\n        IUbiquityAlgorithmicDollar(dollarTokenAddress).setIncentiveContract(\\n            _account,\\n            _incentiveAddress\\n        );\\n    }\\n\\n    function setDollarTokenAddress(address _dollarTokenAddress)\\n        external\\n        onlyAdmin\\n    {\\n        dollarTokenAddress = _dollarTokenAddress;\\n    }\\n\\n    function setGovernanceTokenAddress(address _governanceTokenAddress)\\n        external\\n        onlyAdmin\\n    {\\n        governanceTokenAddress = _governanceTokenAddress;\\n    }\\n\\n    function setSushiSwapPoolAddress(address _sushiSwapPoolAddress)\\n        external\\n        onlyAdmin\\n    {\\n        sushiSwapPoolAddress = _sushiSwapPoolAddress;\\n    }\\n\\n    function setUARCalculatorAddress(address _uarCalculatorAddress)\\n        external\\n        onlyAdmin\\n    {\\n        uarCalculatorAddress = _uarCalculatorAddress;\\n    }\\n\\n    function setCouponCalculatorAddress(address _couponCalculatorAddress)\\n        external\\n        onlyAdmin\\n    {\\n        couponCalculatorAddress = _couponCalculatorAddress;\\n    }\\n\\n    function setDollarMintingCalculatorAddress(\\n        address _dollarMintingCalculatorAddress\\n    ) external onlyAdmin {\\n        dollarMintingCalculatorAddress = _dollarMintingCalculatorAddress;\\n    }\\n\\n    function setExcessDollarsDistributor(\\n        address debtCouponManagerAddress,\\n        address excessCouponDistributor\\n    ) external onlyAdmin {\\n        _excessDollarDistributors[\\n            debtCouponManagerAddress\\n        ] = excessCouponDistributor;\\n    }\\n\\n    function setMasterChefAddress(address _masterChefAddress)\\n        external\\n        onlyAdmin\\n    {\\n        masterChefAddress = _masterChefAddress;\\n    }\\n\\n    function setFormulasAddress(address _formulasAddress) external onlyAdmin {\\n        formulasAddress = _formulasAddress;\\n    }\\n\\n    function setBondingShareAddress(address _bondingShareAddress)\\n        external\\n        onlyAdmin\\n    {\\n        bondingShareAddress = _bondingShareAddress;\\n    }\\n\\n    function setStableSwapMetaPoolAddress(address _stableSwapMetaPoolAddress)\\n        external\\n        onlyAdmin\\n    {\\n        stableSwapMetaPoolAddress = _stableSwapMetaPoolAddress;\\n    }\\n\\n    /**\\n    @notice set the bonding bontract smart contract address\\n    @dev bonding contract participants deposit  curve LP token\\n         for a certain duration to earn uGOV and more curve LP token\\n    @param _bondingContractAddress bonding contract address\\n     */\\n    function setBondingContractAddress(address _bondingContractAddress)\\n        external\\n        onlyAdmin\\n    {\\n        bondingContractAddress = _bondingContractAddress;\\n    }\\n\\n    /**\\n    @notice set the treasury address\\n    @dev the treasury fund is used to maintain the protocol\\n    @param _treasuryAddress treasury fund address\\n     */\\n    function setTreasuryAddress(address _treasuryAddress) external onlyAdmin {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    /**\\n    @notice deploy a new Curve metapools for uAD Token uAD/3Pool\\n    @dev  From the curve documentation for uncollateralized algorithmic\\n    stablecoins amplification should be 5-10\\n    @param _curveFactory MetaPool factory address\\n    @param _crvBasePool Address of the base pool to use within the new metapool.\\n    @param _crv3PoolTokenAddress curve 3Pool token Address\\n    @param _amplificationCoefficient amplification coefficient. The smaller\\n     it is the closer to a constant product we are.\\n    @param _fee Trade fee, given as an integer with 1e10 precision.\\n    */\\n    function deployStableSwapPool(\\n        address _curveFactory,\\n        address _crvBasePool,\\n        address _crv3PoolTokenAddress,\\n        uint256 _amplificationCoefficient,\\n        uint256 _fee\\n    ) external onlyAdmin {\\n        // Create new StableSwap meta pool (uAD <-> 3Crv)\\n        address metaPool =\\n            ICurveFactory(_curveFactory).deploy_metapool(\\n                _crvBasePool,\\n                ERC20(dollarTokenAddress).name(),\\n                ERC20(dollarTokenAddress).symbol(),\\n                dollarTokenAddress,\\n                _amplificationCoefficient,\\n                _fee\\n            );\\n        stableSwapMetaPoolAddress = metaPool;\\n\\n        // Approve the newly-deployed meta pool to transfer this contract's funds\\n        uint256 crv3PoolTokenAmount =\\n            IERC20(_crv3PoolTokenAddress).balanceOf(address(this));\\n        uint256 uADTokenAmount =\\n            IERC20(dollarTokenAddress).balanceOf(address(this));\\n\\n        // safe approve revert if approve from non-zero to non-zero allowance\\n        IERC20(_crv3PoolTokenAddress).safeApprove(metaPool, 0);\\n        IERC20(_crv3PoolTokenAddress).safeApprove(\\n            metaPool,\\n            crv3PoolTokenAmount\\n        );\\n\\n        IERC20(dollarTokenAddress).safeApprove(metaPool, 0);\\n        IERC20(dollarTokenAddress).safeApprove(metaPool, uADTokenAmount);\\n\\n        // coin at index 0 is uAD and index 1 is 3CRV\\n        require(\\n            IMetaPool(metaPool).coins(0) == dollarTokenAddress &&\\n                IMetaPool(metaPool).coins(1) == _crv3PoolTokenAddress,\\n            \\\"uADMGR: COIN_ORDER_MISMATCH\\\"\\n        );\\n        // Add the initial liquidity to the StableSwap meta pool\\n        uint256[2] memory amounts =\\n            [\\n                IERC20(dollarTokenAddress).balanceOf(address(this)),\\n                IERC20(_crv3PoolTokenAddress).balanceOf(address(this))\\n            ];\\n\\n        // set curve 3Pool address\\n        curve3PoolTokenAddress = _crv3PoolTokenAddress;\\n        IMetaPool(metaPool).add_liquidity(amounts, 0, msg.sender);\\n    }\\n\\n    function getExcessDollarsDistributor(address _debtCouponManagerAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _excessDollarDistributors[_debtCouponManagerAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xc86d80999cdfecfd7228760b8f80d76a9081b40e00b978ac9ae7021a46db56d9\",\"license\":\"MIT\"},\"contracts/UbiquityAutoRedeem.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./ERC20Ubiquity.sol\\\";\\n\\ncontract UbiquityAutoRedeem is ERC20Ubiquity {\\n    constructor(address _manager)\\n        ERC20Ubiquity(_manager, \\\"Ubiquity Auto Redeem\\\", \\\"uAR\\\")\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    /// @notice raise capital in form of uAR (only redeemable when uAD > 1$)\\n    /// @param amount the amount to be minted\\n    /// @dev you should be minter to call that function\\n    function raiseCapital(uint256 amount) external {\\n        address treasuryAddress = manager.treasuryAddress();\\n        mint(treasuryAddress, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x265ec5a29d2f40457c900461112e4b7ef96a63e4ee417bd82cdcce231f9e75a6\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICurveFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\\npragma solidity ^0.8.3;\\n\\ninterface ICurveFactory {\\n    event BasePoolAdded(address base_pool, address implementat);\\n    event MetaPoolDeployed(\\n        address coin,\\n        address base_pool,\\n        uint256 A,\\n        uint256 fee,\\n        address deployer\\n    );\\n\\n    function find_pool_for_coins(address _from, address _to)\\n        external\\n        view\\n        returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 i\\n    ) external view returns (address);\\n\\n    function get_n_coins(address _pool)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function get_coins(address _pool) external view returns (address[2] memory);\\n\\n    function get_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_underlying_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_underlying_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_fees(address _pool) external view returns (uint256, uint256);\\n\\n    function get_admin_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function add_base_pool(\\n        address _base_pool,\\n        address _metapool_implementation,\\n        address _fee_receiver\\n    ) external;\\n\\n    function deploy_metapool(\\n        address _base_pool,\\n        string memory _name,\\n        string memory _symbol,\\n        address _coin,\\n        uint256 _A,\\n        uint256 _fee\\n    ) external returns (address);\\n\\n    function commit_transfer_ownership(address addr) external;\\n\\n    function accept_transfer_ownership() external;\\n\\n    function set_fee_receiver(address _base_pool, address _fee_receiver)\\n        external;\\n\\n    function convert_fees() external returns (bool);\\n\\n    function admin() external view returns (address);\\n\\n    function future_admin() external view returns (address);\\n\\n    function pool_list(uint256 arg0) external view returns (address);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function base_pool_list(uint256 arg0) external view returns (address);\\n\\n    function base_pool_count() external view returns (uint256);\\n\\n    function fee_receiver(address arg0) external view returns (address);\\n}\\n\",\"keccak256\":\"0xcb339cf4aab1d3b5e35f541b496ffba0b9ca6a5e1da6dfbe9d03cde693d2f10e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Ubiquity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ERC20 Ubiquiti preset interface\\n/// @author Ubiquity Algorithmic Dollar\\ninterface IERC20Ubiquity is IERC20 {\\n    // ----------- Events -----------\\n    event Minting(\\n        address indexed _to,\\n        address indexed _minter,\\n        uint256 _amount\\n    );\\n\\n    event Burning(address indexed _burned, uint256 _amount);\\n\\n    // ----------- State changing api -----------\\n    function burn(uint256 amount) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Burner only state changing api -----------\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    // ----------- Minter only state changing api -----------\\n    function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf1170e23d8c1c05ecb677a1417bd13a646383544e292100edd7da32fb2188d91\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IMetaPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\\npragma solidity ^0.8.3;\\n\\ninterface IMetaPool {\\n    event Transfer(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 value\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event TokenExchange(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event TokenExchangeUnderlying(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 token_amount,\\n        uint256 coin_amount,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event CommitNewAdmin(uint256 indexed deadline, address indexed admin);\\n    event NewAdmin(address indexed admin);\\n    event CommitNewFee(\\n        uint256 indexed deadline,\\n        uint256 fee,\\n        uint256 admin_fee\\n    );\\n    event NewFee(uint256 fee, uint256 admin_fee);\\n    event RampA(\\n        uint256 old_A,\\n        uint256 new_A,\\n        uint256 initial_time,\\n        uint256 future_time\\n    );\\n    event StopRampA(uint256 A, uint256 t);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _coin,\\n        uint256 _decimals,\\n        uint256 _A,\\n        uint256 _fee,\\n        address _admin\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function get_previous_balances() external view returns (uint256[2] memory);\\n\\n    function get_balances() external view returns (uint256[2] memory);\\n\\n    function get_twap_balances(\\n        uint256[2] memory _first_balances,\\n        uint256[2] memory _last_balances,\\n        uint256 _time_elapsed\\n    ) external view returns (uint256[2] memory);\\n\\n    function get_price_cumulative_last()\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory _amounts,\\n        bool _is_deposit,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory _amounts,\\n        uint256 _min_mint_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256[2] memory _balances\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256[2] memory _balances\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts\\n    ) external returns (uint256[2] memory);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts,\\n        address _receiver\\n    ) external returns (uint256[2] memory);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function ramp_A(uint256 _future_A, uint256 _future_time) external;\\n\\n    function stop_ramp_A() external;\\n\\n    function admin_balances(uint256 i) external view returns (uint256);\\n\\n    function withdraw_admin_fees() external;\\n\\n    function admin() external view returns (address);\\n\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    function balances(uint256 arg0) external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function block_timestamp_last() external view returns (uint256);\\n\\n    function initial_A() external view returns (uint256);\\n\\n    function future_A() external view returns (uint256);\\n\\n    function initial_A_time() external view returns (uint256);\\n\\n    function future_A_time() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function allowance(address arg0, address arg1)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc89cc32a2a8a0336c380ed2ae3c3b5a9292cf1cd431cc09dec4d3057389ed893\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUbiquityAlgorithmicDollar.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IERC20Ubiquity.sol\\\";\\n\\n/// @title UAD stablecoin interface\\n/// @author Ubiquity Algorithmic Dollar\\ninterface IUbiquityAlgorithmicDollar is IERC20Ubiquity {\\n    event IncentiveContractUpdate(\\n        address indexed _incentivized,\\n        address indexed _incentiveContract\\n    );\\n\\n    function setIncentiveContract(address account, address incentive) external;\\n\\n    function incentiveContract(address account) external view returns (address);\\n}\\n\",\"keccak256\":\"0x34469f12207adbfd6003ce7710ddc7b0ee3c1637b5d7fbac2b35c9e3fe3b6182\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200237938038062002379833981016040819052620000349162000467565b806040518060400160405280601481526020017f5562697175697479204175746f2052656465656d000000000000000000000000815250604051806040016040528060038152602001623aa0a960e91b81525081818160039080519060200190620000a1929190620003c1565b508051620000b7906004906020840190620003c1565b50506005805460ff19169055508151620000d9906008906020850190620003c1565b508051620000ef906009906020840190620003c1565b5060058054610100600160a81b0319166101006001600160a01b03868116820292909217928390556040805163a217fddf60e01b8152905191909304909116916391d1485491839163a217fddf916004808301926020929190829003018186803b1580156200015d57600080fd5b505afa15801562000172573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001989190620004b9565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015620001d657600080fd5b505afa158015620001eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000211919062000497565b620002705760405162461bcd60e51b815260206004820152602560248201527f45524332303a206465706c6f796572206d757374206265206d616e616765722060448201526430b236b4b760d91b606482015260840160405180910390fd5b467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200029c62000327565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c0016040516020818303038152906040528051906020012060068190555050505050506200050f565b6060600880546200033890620004d2565b80601f01602080910402602001604051908101604052809291908181526020018280546200036690620004d2565b8015620003b75780601f106200038b57610100808354040283529160200191620003b7565b820191906000526020600020905b8154815290600101906020018083116200039957829003601f168201915b5050505050905090565b828054620003cf90620004d2565b90600052602060002090601f016020900481019282620003f357600085556200043e565b82601f106200040e57805160ff19168380011785556200043e565b828001600101855582156200043e579182015b828111156200043e57825182559160200191906001019062000421565b506200044c92915062000450565b5090565b5b808211156200044c576000815560010162000451565b60006020828403121562000479578081fd5b81516001600160a01b038116811462000490578182fd5b9392505050565b600060208284031215620004a9578081fd5b8151801515811462000490578182fd5b600060208284031215620004cb578081fd5b5051919050565b600181811c90821680620004e757607f821691505b602082108114156200050957634e487b7160e01b600052602260045260246000fd5b50919050565b611e5a806200051f6000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80635c975abb116100ee578063a457c2d711610097578063c47f002711610071578063c47f002714610370578063c621bf8a14610383578063d505accf14610396578063dd62ed3e146103a9576101a3565b8063a457c2d714610337578063a9059cbb1461034a578063b84c82461461035d576101a3565b80637ecebe00116100c85780637ecebe00146103075780638456cb591461032757806395d89b411461032f576101a3565b80635c975abb146102c057806370a08231146102cb57806379cc6790146102f4576101a3565b80633644e5151161015057806340c10f191161012a57806340c10f191461026a57806342966c681461027d578063481c6a7514610290576101a3565b80633644e51514610244578063395093511461024d5780633f4ba83a14610260576101a3565b806323b872dd1161018157806323b872dd146101fb57806330adf81f1461020e578063313ce56714610235576101a3565b806306fdde03146101a8578063095ea7b3146101c657806318160ddd146101e9575b600080fd5b6101b06103e2565b6040516101bd9190611d34565b60405180910390f35b6101d96101d4366004611c0f565b610474565b60405190151581526020016101bd565b6002545b6040519081526020016101bd565b6101d9610209366004611b5a565b61048a565b6101ed7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b604051601281526020016101bd565b6101ed60065481565b6101d961025b366004611c0f565b610555565b61026861058c565b005b610268610278366004611c0f565b6106e0565b61026861028b366004611d1c565b6108bf565b6005546102a89061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101bd565b60055460ff166101d9565b6101ed6102d9366004611ae3565b6001600160a01b031660009081526020819052604090205490565b610268610302366004611c0f565b610946565b6101ed610315366004611ae3565b60076020526000908152604090205481565b610268610b27565b6101b0610c79565b6101d9610345366004611c0f565b610c88565b6101d9610358366004611c0f565b610d3b565b61026861036b366004611c72565b610d48565b61026861037e366004611c72565b610eb7565b610268610391366004611d1c565b611022565b6102686103a4366004611b9a565b6110b6565b6101ed6103b7366004611b22565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600880546103f190611db6565b80601f016020809104026020016040519081016040528092919081815260200182805461041d90611db6565b801561046a5780601f1061043f5761010080835404028352916020019161046a565b820191906000526020600020905b81548152906001019060200180831161044d57829003601f168201915b5050505050905090565b60006104813384846112d5565b50600192915050565b60006104978484846113fa565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105365760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61054a85336105458685611d9f565b6112d5565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610481918590610545908690611d87565b6005546040805163e63ab1e960e01b815290516101009092046001600160a01b0316916391d1485491839163e63ab1e991600480820192602092909190829003018186803b1580156105dd57600080fd5b505afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106159190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b15801561065257600080fd5b505afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190611c3a565b6106d65760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e616e636520746f6b656e3a206e6f742070617573657200000000604482015260640161052d565b6106de611450565b565b60055460408051632f533cb760e01b815290516101009092046001600160a01b0316916391d14854918391632f533cb791600480820192602092909190829003018186803b15801561073157600080fd5b505afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107699190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190611c3a565b61082a5760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e616e636520746f6b656e3a206e6f74206d696e74657200000000604482015260640161052d565b60055460ff16156108705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b61087a82826114ec565b60405181815233906001600160a01b038416907fb1233017d63154bc561d57c16f7b6a55e2e1acd7fcac94045a9f35fb31a850ca906020015b60405180910390a35050565b60055460ff16156109055760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b61090e816115d0565b60405181815233907f62626c8ae1f1f3ad3b2f42ba7b806bbc48e9a59dab06414984113eaab612fe479060200160405180910390a250565b6005546040805163f39e5a4760e01b815290516101009092046001600160a01b0316916391d1485491839163f39e5a4791600480820192602092909190829003018186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190611c3a565b610a905760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e616e636520746f6b656e3a206e6f74206275726e657200000000604482015260640161052d565b60055460ff1615610ad65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b610ae082826115dd565b816001600160a01b03167f62626c8ae1f1f3ad3b2f42ba7b806bbc48e9a59dab06414984113eaab612fe4782604051610b1b91815260200190565b60405180910390a25050565b6005546040805163e63ab1e960e01b815290516101009092046001600160a01b0316916391d1485491839163e63ab1e991600480820192602092909190829003018186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb09190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c259190611c3a565b610c715760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e616e636520746f6b656e3a206e6f742070617573657200000000604482015260640161052d565b6106de611738565b6060600980546103f190611db6565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610d225760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161052d565b610d3133856105458685611d9f565b5060019392505050565b60006104813384846113fa565b6005546040805163a217fddf60e01b815290516101009092046001600160a01b0316916391d1485491839163a217fddf91600480820192602092909190829003018186803b158015610d9957600080fd5b505afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd19190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e469190611c3a565b610ea05760405162461bcd60e51b815260206004820152602560248201527f45524332303a206465706c6f796572206d757374206265206d616e616765722060448201526430b236b4b760d91b606482015260840161052d565b8051610eb3906009906020840190611a4a565b5050565b6005546040805163a217fddf60e01b815290516101009092046001600160a01b0316916391d1485491839163a217fddf91600480820192602092909190829003018186803b158015610f0857600080fd5b505afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f409190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190611c3a565b61100f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a206465706c6f796572206d757374206265206d616e616765722060448201526430b236b4b760d91b606482015260840161052d565b8051610eb3906008906020840190611a4a565b6000600560019054906101000a90046001600160a01b03166001600160a01b031663c5f956af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561107257600080fd5b505afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa9190611b06565b9050610eb381836106e0565b428410156111065760405162461bcd60e51b815260206004820152600f60248201527f446f6c6c61723a20455850495245440000000000000000000000000000000000604482015260640161052d565b6006546001600160a01b038816600090815260076020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761115983611df1565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016111d292919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561123d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906112735750886001600160a01b0316816001600160a01b0316145b6112bf5760405162461bcd60e51b815260206004820152601960248201527f446f6c6c61723a20494e56414c49445f5349474e415455524500000000000000604482015260640161052d565b6112ca8989896112d5565b505050505050505050565b6001600160a01b03831661313375760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161052d565b6001600160a01b0382166113985760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161052d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60055460ff16156114405760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b61144b8383836117b3565b505050565b60055460ff166114a25760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161052d565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166115425760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161052d565b61154e600083836119c5565b80600260008282546115609190611d87565b90915550506001600160a01b0382166000908152602081905260408120805483929061158d908490611d87565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016108b3565b6115da33826115dd565b50565b6001600160a01b03821661163d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161052d565b611649826000836119c5565b6001600160a01b038216600090815260208190526040902054818110156116bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161052d565b6116c78282611d9f565b6001600160a01b038416600090815260208190526040812091909155600280548492906116f5908490611d9f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016113ed565b60055460ff161561177e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114cf3390565b6001600160a01b03831661182f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161052d565b6001600160a01b0382166118915760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161052d565b61189c8383836119c5565b6001600160a01b0383166000908152602081905260409020548181101561192b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161052d565b6119358282611d9f565b6001600160a01b03808616600090815260208190526040808220939093559085168152908120805484929061196b908490611d87565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119b791815260200190565b60405180910390a350505050565b61144b8383836119d760055460ff1690565b1561144b5760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e7366657220776860448201527f696c652070617573656400000000000000000000000000000000000000000000606482015260840161052d565b828054611a5690611db6565b90600052602060002090601f016020900481019282611a785760008555611abe565b82601f10611a9157805160ff1916838001178555611abe565b82800160010185558215611abe579182015b82811115611abe578251825591602001919060010190611aa3565b50611aca929150611ace565b5090565b5b80821115611aca5760008155600101611acf565b600060208284031215611af4578081fd5b8135611aff81611e38565b9392505050565b600060208284031215611b17578081fd5b8151611aff81611e38565b60008060408385031215611b34578081fd5b8235611b3f81611e38565b91506020830135611b4f81611e38565b809150509250929050565b600080600060608486031215611b6e578081fd5b8335611b7981611e38565b92506020840135611b8981611e38565b929592945050506040919091013590565b600080600080600080600060e0888a031215611bb4578283fd5b8735611bbf81611e38565b96506020880135611bcf81611e38565b95506040880135945060608801359350608088013560ff81168114611bf2578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611c21578182fd5b8235611c2c81611e38565b946020939093013593505050565b600060208284031215611c4b578081fd5b81518015158114611aff578182fd5b600060208284031215611c6b578081fd5b5051919050565b600060208284031215611c83578081fd5b813567ffffffffffffffff80821115611c9a578283fd5b818401915084601f830112611cad578283fd5b813581811115611cbf57611cbf611e22565b604051601f8201601f19908116603f01168101908382118183101715611ce757611ce7611e22565b81604052828152876020848701011115611cff578586fd5b826020860160208301379182016020019490945295945050505050565b600060208284031215611d2d578081fd5b5035919050565b6000602080835283518082850152825b81811015611d6057858101830151858201604001528201611d44565b81811115611d715783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115611d9a57611d9a611e0c565b500190565b600082821015611db157611db1611e0c565b500390565b600181811c90821680611dca57607f821691505b60208210811415611deb57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611e0557611e05611e0c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146115da57600080fdfea164736f6c6343000803000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c80635c975abb116100ee578063a457c2d711610097578063c47f002711610071578063c47f002714610370578063c621bf8a14610383578063d505accf14610396578063dd62ed3e146103a9576101a3565b8063a457c2d714610337578063a9059cbb1461034a578063b84c82461461035d576101a3565b80637ecebe00116100c85780637ecebe00146103075780638456cb591461032757806395d89b411461032f576101a3565b80635c975abb146102c057806370a08231146102cb57806379cc6790146102f4576101a3565b80633644e5151161015057806340c10f191161012a57806340c10f191461026a57806342966c681461027d578063481c6a7514610290576101a3565b80633644e51514610244578063395093511461024d5780633f4ba83a14610260576101a3565b806323b872dd1161018157806323b872dd146101fb57806330adf81f1461020e578063313ce56714610235576101a3565b806306fdde03146101a8578063095ea7b3146101c657806318160ddd146101e9575b600080fd5b6101b06103e2565b6040516101bd9190611d34565b60405180910390f35b6101d96101d4366004611c0f565b610474565b60405190151581526020016101bd565b6002545b6040519081526020016101bd565b6101d9610209366004611b5a565b61048a565b6101ed7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b604051601281526020016101bd565b6101ed60065481565b6101d961025b366004611c0f565b610555565b61026861058c565b005b610268610278366004611c0f565b6106e0565b61026861028b366004611d1c565b6108bf565b6005546102a89061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101bd565b60055460ff166101d9565b6101ed6102d9366004611ae3565b6001600160a01b031660009081526020819052604090205490565b610268610302366004611c0f565b610946565b6101ed610315366004611ae3565b60076020526000908152604090205481565b610268610b27565b6101b0610c79565b6101d9610345366004611c0f565b610c88565b6101d9610358366004611c0f565b610d3b565b61026861036b366004611c72565b610d48565b61026861037e366004611c72565b610eb7565b610268610391366004611d1c565b611022565b6102686103a4366004611b9a565b6110b6565b6101ed6103b7366004611b22565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600880546103f190611db6565b80601f016020809104026020016040519081016040528092919081815260200182805461041d90611db6565b801561046a5780601f1061043f5761010080835404028352916020019161046a565b820191906000526020600020905b81548152906001019060200180831161044d57829003601f168201915b5050505050905090565b60006104813384846112d5565b50600192915050565b60006104978484846113fa565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105365760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61054a85336105458685611d9f565b6112d5565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610481918590610545908690611d87565b6005546040805163e63ab1e960e01b815290516101009092046001600160a01b0316916391d1485491839163e63ab1e991600480820192602092909190829003018186803b1580156105dd57600080fd5b505afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106159190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b15801561065257600080fd5b505afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190611c3a565b6106d65760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e616e636520746f6b656e3a206e6f742070617573657200000000604482015260640161052d565b6106de611450565b565b60055460408051632f533cb760e01b815290516101009092046001600160a01b0316916391d14854918391632f533cb791600480820192602092909190829003018186803b15801561073157600080fd5b505afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107699190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190611c3a565b61082a5760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e616e636520746f6b656e3a206e6f74206d696e74657200000000604482015260640161052d565b60055460ff16156108705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b61087a82826114ec565b60405181815233906001600160a01b038416907fb1233017d63154bc561d57c16f7b6a55e2e1acd7fcac94045a9f35fb31a850ca906020015b60405180910390a35050565b60055460ff16156109055760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b61090e816115d0565b60405181815233907f62626c8ae1f1f3ad3b2f42ba7b806bbc48e9a59dab06414984113eaab612fe479060200160405180910390a250565b6005546040805163f39e5a4760e01b815290516101009092046001600160a01b0316916391d1485491839163f39e5a4791600480820192602092909190829003018186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190611c3a565b610a905760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e616e636520746f6b656e3a206e6f74206275726e657200000000604482015260640161052d565b60055460ff1615610ad65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b610ae082826115dd565b816001600160a01b03167f62626c8ae1f1f3ad3b2f42ba7b806bbc48e9a59dab06414984113eaab612fe4782604051610b1b91815260200190565b60405180910390a25050565b6005546040805163e63ab1e960e01b815290516101009092046001600160a01b0316916391d1485491839163e63ab1e991600480820192602092909190829003018186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb09190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c259190611c3a565b610c715760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e616e636520746f6b656e3a206e6f742070617573657200000000604482015260640161052d565b6106de611738565b6060600980546103f190611db6565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610d225760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161052d565b610d3133856105458685611d9f565b5060019392505050565b60006104813384846113fa565b6005546040805163a217fddf60e01b815290516101009092046001600160a01b0316916391d1485491839163a217fddf91600480820192602092909190829003018186803b158015610d9957600080fd5b505afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd19190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e469190611c3a565b610ea05760405162461bcd60e51b815260206004820152602560248201527f45524332303a206465706c6f796572206d757374206265206d616e616765722060448201526430b236b4b760d91b606482015260840161052d565b8051610eb3906009906020840190611a4a565b5050565b6005546040805163a217fddf60e01b815290516101009092046001600160a01b0316916391d1485491839163a217fddf91600480820192602092909190829003018186803b158015610f0857600080fd5b505afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f409190611c5a565b6040516001600160e01b031960e084901b168152600481019190915233602482015260440160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190611c3a565b61100f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a206465706c6f796572206d757374206265206d616e616765722060448201526430b236b4b760d91b606482015260840161052d565b8051610eb3906008906020840190611a4a565b6000600560019054906101000a90046001600160a01b03166001600160a01b031663c5f956af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561107257600080fd5b505afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa9190611b06565b9050610eb381836106e0565b428410156111065760405162461bcd60e51b815260206004820152600f60248201527f446f6c6c61723a20455850495245440000000000000000000000000000000000604482015260640161052d565b6006546001600160a01b038816600090815260076020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761115983611df1565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016111d292919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561123d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906112735750886001600160a01b0316816001600160a01b0316145b6112bf5760405162461bcd60e51b815260206004820152601960248201527f446f6c6c61723a20494e56414c49445f5349474e415455524500000000000000604482015260640161052d565b6112ca8989896112d5565b505050505050505050565b6001600160a01b03831661313375760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161052d565b6001600160a01b0382166113985760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161052d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60055460ff16156114405760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b61144b8383836117b3565b505050565b60055460ff166114a25760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161052d565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166115425760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161052d565b61154e600083836119c5565b80600260008282546115609190611d87565b90915550506001600160a01b0382166000908152602081905260408120805483929061158d908490611d87565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016108b3565b6115da33826115dd565b50565b6001600160a01b03821661163d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161052d565b611649826000836119c5565b6001600160a01b038216600090815260208190526040902054818110156116bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161052d565b6116c78282611d9f565b6001600160a01b038416600090815260208190526040812091909155600280548492906116f5908490611d9f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016113ed565b60055460ff161561177e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161052d565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114cf3390565b6001600160a01b03831661182f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161052d565b6001600160a01b0382166118915760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161052d565b61189c8383836119c5565b6001600160a01b0383166000908152602081905260409020548181101561192b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161052d565b6119358282611d9f565b6001600160a01b03808616600090815260208190526040808220939093559085168152908120805484929061196b908490611d87565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119b791815260200190565b60405180910390a350505050565b61144b8383836119d760055460ff1690565b1561144b5760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e7366657220776860448201527f696c652070617573656400000000000000000000000000000000000000000000606482015260840161052d565b828054611a5690611db6565b90600052602060002090601f016020900481019282611a785760008555611abe565b82601f10611a9157805160ff1916838001178555611abe565b82800160010185558215611abe579182015b82811115611abe578251825591602001919060010190611aa3565b50611aca929150611ace565b5090565b5b80821115611aca5760008155600101611acf565b600060208284031215611af4578081fd5b8135611aff81611e38565b9392505050565b600060208284031215611b17578081fd5b8151611aff81611e38565b60008060408385031215611b34578081fd5b8235611b3f81611e38565b91506020830135611b4f81611e38565b809150509250929050565b600080600060608486031215611b6e578081fd5b8335611b7981611e38565b92506020840135611b8981611e38565b929592945050506040919091013590565b600080600080600080600060e0888a031215611bb4578283fd5b8735611bbf81611e38565b96506020880135611bcf81611e38565b95506040880135945060608801359350608088013560ff81168114611bf2578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611c21578182fd5b8235611c2c81611e38565b946020939093013593505050565b600060208284031215611c4b578081fd5b81518015158114611aff578182fd5b600060208284031215611c6b578081fd5b5051919050565b600060208284031215611c83578081fd5b813567ffffffffffffffff80821115611c9a578283fd5b818401915084601f830112611cad578283fd5b813581811115611cbf57611cbf611e22565b604051601f8201601f19908116603f01168101908382118183101715611ce757611ce7611e22565b81604052828152876020848701011115611cff578586fd5b826020860160208301379182016020019490945295945050505050565b600060208284031215611d2d578081fd5b5035919050565b6000602080835283518082850152825b81811015611d6057858101830151858201604001528201611d44565b81811115611d715783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115611d9a57611d9a611e0c565b500190565b600082821015611db157611db1611e0c565b500390565b600181811c90821680611dca57607f821691505b60208210811415611deb57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611e0557611e05611e0c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146115da57600080fdfea164736f6c6343000803000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "amount": "the amount to burn"
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "account": "the account to burn from",
          "amount": "the amount to burn"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "the deadline after which the approval is no longer valid",
          "owner": "the uAD holder",
          "spender": "the approved operator",
          "value": "the amount approved"
        }
      },
      "raiseCapital(uint256)": {
        "details": "you should be minter to call that function",
        "params": {
          "amount": "the amount to be minted"
        }
      },
      "setName(string)": {
        "params": {
          "newName": "new token name"
        }
      },
      "setSymbol(string)": {
        "params": {
          "newSymbol": "new token symbol"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "burn UAD tokens from caller"
      },
      "burnFrom(address,uint256)": {
        "notice": "burn uAD tokens from specified account"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "permit spending of uAD. owner has signed a message allowing         spender to transfer up to amount uAD"
      },
      "raiseCapital(uint256)": {
        "notice": "raise capital in form of uAR (only redeemable when uAD > 1$)"
      },
      "setName(string)": {
        "notice": "setName update token name"
      },
      "setSymbol(string)": {
        "notice": "setSymbol update token symbol"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1803,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1809,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1811,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1813,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1815,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 385,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "_paused",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 7586,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "manager",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(UbiquityAlgorithmicDollarManager)10304"
      },
      {
        "astId": 7588,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 7595,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7597,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "_tokenName",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 7599,
        "contract": "contracts/UbiquityAutoRedeem.sol:UbiquityAutoRedeem",
        "label": "_symbol",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(UbiquityAlgorithmicDollarManager)10304": {
        "encoding": "inplace",
        "label": "contract UbiquityAlgorithmicDollarManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
