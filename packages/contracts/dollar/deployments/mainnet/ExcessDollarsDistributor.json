{
  "address": "0x25d2b980E406bE97237A06Bca636AeD607661Dfa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "distributeDollars",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract UbiquityAlgorithmicDollarManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c318cf16b148b3d79655d320f6e126d99c304a89caae1f0c6ab907e06499e7f",
  "receipt": {
    "to": null,
    "from": "0xefC0e701A824943b469a694aC564Aa1efF7Ab7dd",
    "contractAddress": "0x25d2b980E406bE97237A06Bca636AeD607661Dfa",
    "transactionIndex": 73,
    "gasUsed": "1606235",
    "logsBloom": "0x
    "blockHash": "0xd113e992f4a30868848b2aceda29cf4da734fd9accd4f543a5ea278994b0b3fc",
    "transactionHash": "0x2c318cf16b148b3d79655d320f6e126d99c304a89caae1f0c6ab907e06499e7f",
    "logs": [],
    "blockNumber": 12595541,
    "cumulativeGasUsed": "5336361",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x4DA97a8b831C345dBe6d16FF7432DF2b7b776d98"],
  "solcInputHash": "718dfe5f2e9bb98c22443f71ab0527e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"distributeDollars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract UbiquityAlgorithmicDollarManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_manager\":\"the address of the manager contract so we can fetch variables\"}}},\"title\":\"An excess dollar distributor which sends dollars to treasury, lp rewards and inflation rewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExcessDollarsDistributor.sol\":\"ExcessDollarsDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x7c0ea2d284bad1aa002165ba4c5eac30070be8e56b19dba1ac7c8f2c8bd4832c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/ExcessDollarsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IERC20Ubiquity.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IExcessDollarsDistributor.sol\\\";\\nimport \\\"./interfaces/IMetaPool.sol\\\";\\nimport \\\"./UbiquityAlgorithmicDollarManager.sol\\\";\\nimport \\\"./SushiSwapPool.sol\\\";\\nimport \\\"./libs/ABDKMathQuad.sol\\\";\\n\\n/// @title An excess dollar distributor which sends dollars to treasury,\\n/// lp rewards and inflation rewards\\ncontract ExcessDollarsDistributor is IExcessDollarsDistributor {\\n    using SafeERC20 for IERC20Ubiquity;\\n    using SafeERC20 for IERC20;\\n    using ABDKMathQuad for uint256;\\n    using ABDKMathQuad for bytes16;\\n    UbiquityAlgorithmicDollarManager public manager;\\n    uint256 private immutable _minAmountToDistribute = 100 ether;\\n    IUniswapV2Router02 private immutable _router =\\n        IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // SushiV2Router02\\n\\n    /// @param _manager the address of the manager contract so we can fetch variables\\n    constructor(address _manager) {\\n        manager = UbiquityAlgorithmicDollarManager(_manager);\\n    }\\n\\n    function distributeDollars() external override {\\n        //the excess dollars which were sent to this contract by the coupon manager\\n        uint256 excessDollars =\\n            IERC20Ubiquity(manager.dollarTokenAddress()).balanceOf(\\n                address(this)\\n            );\\n        if (excessDollars > _minAmountToDistribute) {\\n            address treasuryAddress = manager.treasuryAddress();\\n\\n            // curve uAD-3CRV liquidity pool\\n            uint256 tenPercent =\\n                excessDollars.fromUInt().div(uint256(10).fromUInt()).toUInt();\\n\\n            IERC20Ubiquity(manager.dollarTokenAddress()).safeTransfer(\\n                treasuryAddress,\\n                tenPercent\\n            );\\n            // convert uAD to uGOV-UAD LP on sushi and burn them\\n            _governanceBuyBackLPAndBurn(tenPercent);\\n            // convert remaining uAD to curve LP tokens\\n            // and transfer the curve LP tokens to the bonding contract\\n            _convertToCurveLPAndTransfer(\\n                excessDollars - tenPercent - tenPercent\\n            );\\n        }\\n    }\\n\\n    // swap half amount to uGOV\\n    function _swapDollarsForGovernance(bytes16 amountIn)\\n        internal\\n        returns (uint256)\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = manager.dollarTokenAddress();\\n        path[1] = manager.governanceTokenAddress();\\n        uint256[] memory amounts =\\n            _router.swapExactTokensForTokens(\\n                amountIn.toUInt(),\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp + 100\\n            );\\n\\n        return amounts[1];\\n    }\\n\\n    // buy-back and burn uGOV\\n    function _governanceBuyBackLPAndBurn(uint256 amount) internal {\\n        bytes16 amountUAD = (amount.fromUInt()).div(uint256(2).fromUInt());\\n\\n        // we need to approve sushi router\\n        IERC20Ubiquity(manager.dollarTokenAddress()).safeApprove(\\n            address(_router),\\n            0\\n        );\\n        IERC20Ubiquity(manager.dollarTokenAddress()).safeApprove(\\n            address(_router),\\n            amount\\n        );\\n        uint256 amountUGOV = _swapDollarsForGovernance(amountUAD);\\n\\n        IERC20Ubiquity(manager.governanceTokenAddress()).safeApprove(\\n            address(_router),\\n            0\\n        );\\n        IERC20Ubiquity(manager.governanceTokenAddress()).safeApprove(\\n            address(_router),\\n            amountUGOV\\n        );\\n\\n        // deposit liquidity and transfer to zero address (burn)\\n        _router.addLiquidity(\\n            manager.dollarTokenAddress(),\\n            manager.governanceTokenAddress(),\\n            amountUAD.toUInt(),\\n            amountUGOV,\\n            0,\\n            0,\\n            address(0),\\n            block.timestamp + 100\\n        );\\n    }\\n\\n    // @dev convert to curve LP\\n    // @param amount to convert to curve LP by swapping to 3CRV\\n    //        and deposit the 3CRV as liquidity to get uAD-3CRV LP tokens\\n    //        the LP token are sent to the bonding contract\\n    function _convertToCurveLPAndTransfer(uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        // we need to approve  metaPool\\n        IERC20Ubiquity(manager.dollarTokenAddress()).safeApprove(\\n            manager.stableSwapMetaPoolAddress(),\\n            0\\n        );\\n        IERC20Ubiquity(manager.dollarTokenAddress()).safeApprove(\\n            manager.stableSwapMetaPoolAddress(),\\n            amount\\n        );\\n\\n        // swap 3CRV=> x uAD\\n        uint256 amount3CRVReceived =\\n            IMetaPool(manager.stableSwapMetaPoolAddress()).exchange(\\n                0,\\n                1,\\n                amount,\\n                0\\n            );\\n\\n        // approve metapool to transfer our 3CRV\\n        IERC20(manager.curve3PoolTokenAddress()).safeApprove(\\n            manager.stableSwapMetaPoolAddress(),\\n            0\\n        );\\n        IERC20(manager.curve3PoolTokenAddress()).safeApprove(\\n            manager.stableSwapMetaPoolAddress(),\\n            amount3CRVReceived\\n        );\\n\\n        // deposit liquidity\\n        uint256 res =\\n            IMetaPool(manager.stableSwapMetaPoolAddress()).add_liquidity(\\n                [0, amount3CRVReceived],\\n                0,\\n                manager.bondingContractAddress()\\n            );\\n        // update TWAP price\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xdfa2964c80efaea32e547c2b242be66445b7325daf812a5667dd69dc21e8bb9f\",\"license\":\"MIT\"},\"contracts/SushiSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./UbiquityAlgorithmicDollarManager.sol\\\";\\n\\ncontract SushiSwapPool {\\n    IUniswapV2Factory public factory =\\n        IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\\n\\n    UbiquityAlgorithmicDollarManager public manager;\\n    IUniswapV2Pair public pair;\\n\\n    constructor(address _manager) {\\n        manager = UbiquityAlgorithmicDollarManager(_manager);\\n        require(\\n            manager.dollarTokenAddress() != address(0),\\n            \\\"Dollar address not set\\\"\\n        );\\n        require(\\n            manager.governanceTokenAddress() != address(0),\\n            \\\"uGOV Address not set\\\"\\n        );\\n        // check if pair already exist\\n        address pool =\\n            factory.getPair(\\n                manager.dollarTokenAddress(),\\n                manager.governanceTokenAddress()\\n            );\\n        if (pool == address(0)) {\\n            pool = factory.createPair(\\n                manager.dollarTokenAddress(),\\n                manager.governanceTokenAddress()\\n            );\\n        }\\n        pair = IUniswapV2Pair(pool);\\n    }\\n}\\n\",\"keccak256\":\"0xa142923eb5975ae9adc5e48b8ef1529c379a07b06cd5e3c9374f8e95c270f25b\",\"license\":\"MIT\"},\"contracts/TWAPOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IMetaPool.sol\\\";\\n\\ncontract TWAPOracle {\\n    address public immutable pool;\\n    address public immutable token0;\\n    address public immutable token1;\\n    uint256 public price0Average;\\n    uint256 public price1Average;\\n    uint256 public pricesBlockTimestampLast;\\n    uint256[2] public priceCumulativeLast;\\n\\n    constructor(\\n        address _pool,\\n        address _uADtoken0,\\n        address _curve3CRVtoken1\\n    ) {\\n        pool = _pool;\\n        // coin at index 0 is uAD and index 1 is 3CRV\\n        require(\\n            IMetaPool(_pool).coins(0) == _uADtoken0 &&\\n                IMetaPool(_pool).coins(1) == _curve3CRVtoken1,\\n            \\\"TWAPOracle: COIN_ORDER_MISMATCH\\\"\\n        );\\n\\n        token0 = _uADtoken0;\\n        token1 = _curve3CRVtoken1;\\n\\n        uint256 _reserve0 = uint112(IMetaPool(_pool).balances(0));\\n        uint256 _reserve1 = uint112(IMetaPool(_pool).balances(1));\\n\\n        // ensure that there's liquidity in the pair\\n        require(_reserve0 != 0 && _reserve1 != 0, \\\"TWAPOracle: NO_RESERVES\\\");\\n        // ensure that pair balance is perfect\\n        require(_reserve0 == _reserve1, \\\"TWAPOracle: PAIR_UNBALANCED\\\");\\n        priceCumulativeLast = IMetaPool(_pool).get_price_cumulative_last();\\n        pricesBlockTimestampLast = IMetaPool(_pool).block_timestamp_last();\\n\\n        price0Average = 1 ether;\\n        price1Average = 1 ether;\\n    }\\n\\n    // calculate average price\\n    function update() external {\\n        (uint256[2] memory priceCumulative, uint256 blockTimestamp) =\\n            _currentCumulativePrices();\\n\\n        if (blockTimestamp - pricesBlockTimestampLast > 0) {\\n            // get the balances between now and the last price cumulative snapshot\\n            uint256[2] memory twapBalances =\\n                IMetaPool(pool).get_twap_balances(\\n                    priceCumulativeLast,\\n                    priceCumulative,\\n                    blockTimestamp - pricesBlockTimestampLast\\n                );\\n\\n            // price to exchange amounIn uAD to 3CRV based on TWAP\\n            price0Average = IMetaPool(pool).get_dy(0, 1, 1 ether, twapBalances);\\n            // price to exchange amounIn 3CRV to uAD  based on TWAP\\n            price1Average = IMetaPool(pool).get_dy(1, 0, 1 ether, twapBalances);\\n            // we update the priceCumulative\\n            priceCumulativeLast = priceCumulative;\\n            pricesBlockTimestampLast = blockTimestamp;\\n        }\\n    }\\n\\n    // note this will always return 0 before update has been called successfully\\n    // for the first time.\\n    function consult(address token) external view returns (uint256 amountOut) {\\n        if (token == token0) {\\n            // price to exchange 1 uAD to 3CRV based on TWAP\\n            amountOut = price0Average;\\n        } else {\\n            require(token == token1, \\\"TWAPOracle: INVALID_TOKEN\\\");\\n            // price to exchange 1 3CRV to uAD  based on TWAP\\n            amountOut = price1Average;\\n        }\\n    }\\n\\n    function _currentCumulativePrices()\\n        internal\\n        view\\n        returns (uint256[2] memory priceCumulative, uint256 blockTimestamp)\\n    {\\n        priceCumulative = IMetaPool(pool).get_price_cumulative_last();\\n        blockTimestamp = IMetaPool(pool).block_timestamp_last();\\n    }\\n}\\n\",\"keccak256\":\"0x24313b9e13825536130e9619cc0f3188e8ac3b1dd8199a1df5ea2d8ad0d28939\",\"license\":\"Apache-2.0\"},\"contracts/UbiquityAlgorithmicDollarManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IUbiquityAlgorithmicDollar.sol\\\";\\nimport \\\"./interfaces/ICurveFactory.sol\\\";\\nimport \\\"./interfaces/IMetaPool.sol\\\";\\n\\nimport \\\"./TWAPOracle.sol\\\";\\n\\n/// @title A central config for the uAD system. Also acts as a central\\n/// access control manager.\\n/// @notice For storing constants. For storing variables and allowing them to\\n/// be changed by the admin (governance)\\n/// @dev This should be used as a central access control manager which other\\n/// contracts use to check permissions\\ncontract UbiquityAlgorithmicDollarManager is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant UBQ_MINTER_ROLE = keccak256(\\\"UBQ_MINTER_ROLE\\\");\\n    bytes32 public constant UBQ_BURNER_ROLE = keccak256(\\\"UBQ_BURNER_ROLE\\\");\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant COUPON_MANAGER_ROLE = keccak256(\\\"COUPON_MANAGER\\\");\\n    bytes32 public constant BONDING_MANAGER_ROLE = keccak256(\\\"BONDING_MANAGER\\\");\\n    bytes32 public constant INCENTIVE_MANAGER_ROLE =\\n        keccak256(\\\"INCENTIVE_MANAGER\\\");\\n    bytes32 public constant UBQ_TOKEN_MANAGER_ROLE =\\n        keccak256(\\\"UBQ_TOKEN_MANAGER_ROLE\\\");\\n    address public twapOracleAddress;\\n    address public debtCouponAddress;\\n    address public dollarTokenAddress; // uAD\\n    address public couponCalculatorAddress;\\n    address public dollarMintingCalculatorAddress;\\n    address public bondingShareAddress;\\n    address public bondingContractAddress;\\n    address public stableSwapMetaPoolAddress;\\n    address public curve3PoolTokenAddress; // 3CRV\\n    address public treasuryAddress;\\n    address public governanceTokenAddress; // uGOV\\n    address public sushiSwapPoolAddress; // sushi pool uAD-uGOV\\n    address public masterChefAddress;\\n    address public formulasAddress;\\n    address public autoRedeemTokenAddress; // uAR\\n    address public uarCalculatorAddress; // uAR calculator\\n\\n    //key = address of couponmanager, value = excessdollardistributor\\n    mapping(address => address) private _excessDollarDistributors;\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"uADMGR: Caller is not admin\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(UBQ_MINTER_ROLE, _admin);\\n        _setupRole(PAUSER_ROLE, _admin);\\n        _setupRole(COUPON_MANAGER_ROLE, _admin);\\n        _setupRole(BONDING_MANAGER_ROLE, _admin);\\n        _setupRole(INCENTIVE_MANAGER_ROLE, _admin);\\n        _setupRole(UBQ_TOKEN_MANAGER_ROLE, address(this));\\n    }\\n\\n    // TODO Add a generic setter for extra addresses that needs to be linked\\n    function setTwapOracleAddress(address _twapOracleAddress)\\n        external\\n        onlyAdmin\\n    {\\n        twapOracleAddress = _twapOracleAddress;\\n        // to be removed\\n\\n        TWAPOracle oracle = TWAPOracle(twapOracleAddress);\\n        oracle.update();\\n    }\\n\\n    function setuARTokenAddress(address _uarTokenAddress) external onlyAdmin {\\n        autoRedeemTokenAddress = _uarTokenAddress;\\n    }\\n\\n    function setDebtCouponAddress(address _debtCouponAddress)\\n        external\\n        onlyAdmin\\n    {\\n        debtCouponAddress = _debtCouponAddress;\\n    }\\n\\n    function setIncentiveToUAD(address _account, address _incentiveAddress)\\n        external\\n        onlyAdmin\\n    {\\n        IUbiquityAlgorithmicDollar(dollarTokenAddress).setIncentiveContract(\\n            _account,\\n            _incentiveAddress\\n        );\\n    }\\n\\n    function setDollarTokenAddress(address _dollarTokenAddress)\\n        external\\n        onlyAdmin\\n    {\\n        dollarTokenAddress = _dollarTokenAddress;\\n    }\\n\\n    function setGovernanceTokenAddress(address _governanceTokenAddress)\\n        external\\n        onlyAdmin\\n    {\\n        governanceTokenAddress = _governanceTokenAddress;\\n    }\\n\\n    function setSushiSwapPoolAddress(address _sushiSwapPoolAddress)\\n        external\\n        onlyAdmin\\n    {\\n        sushiSwapPoolAddress = _sushiSwapPoolAddress;\\n    }\\n\\n    function setUARCalculatorAddress(address _uarCalculatorAddress)\\n        external\\n        onlyAdmin\\n    {\\n        uarCalculatorAddress = _uarCalculatorAddress;\\n    }\\n\\n    function setCouponCalculatorAddress(address _couponCalculatorAddress)\\n        external\\n        onlyAdmin\\n    {\\n        couponCalculatorAddress = _couponCalculatorAddress;\\n    }\\n\\n    function setDollarMintingCalculatorAddress(\\n        address _dollarMintingCalculatorAddress\\n    ) external onlyAdmin {\\n        dollarMintingCalculatorAddress = _dollarMintingCalculatorAddress;\\n    }\\n\\n    function setExcessDollarsDistributor(\\n        address debtCouponManagerAddress,\\n        address excessCouponDistributor\\n    ) external onlyAdmin {\\n        _excessDollarDistributors[\\n            debtCouponManagerAddress\\n        ] = excessCouponDistributor;\\n    }\\n\\n    function setMasterChefAddress(address _masterChefAddress)\\n        external\\n        onlyAdmin\\n    {\\n        masterChefAddress = _masterChefAddress;\\n    }\\n\\n    function setFormulasAddress(address _formulasAddress) external onlyAdmin {\\n        formulasAddress = _formulasAddress;\\n    }\\n\\n    function setBondingShareAddress(address _bondingShareAddress)\\n        external\\n        onlyAdmin\\n    {\\n        bondingShareAddress = _bondingShareAddress;\\n    }\\n\\n    function setStableSwapMetaPoolAddress(address _stableSwapMetaPoolAddress)\\n        external\\n        onlyAdmin\\n    {\\n        stableSwapMetaPoolAddress = _stableSwapMetaPoolAddress;\\n    }\\n\\n    /**\\n    @notice set the bonding bontract smart contract address\\n    @dev bonding contract participants deposit  curve LP token\\n         for a certain duration to earn uGOV and more curve LP token\\n    @param _bondingContractAddress bonding contract address\\n     */\\n    function setBondingContractAddress(address _bondingContractAddress)\\n        external\\n        onlyAdmin\\n    {\\n        bondingContractAddress = _bondingContractAddress;\\n    }\\n\\n    /**\\n    @notice set the treasury address\\n    @dev the treasury fund is used to maintain the protocol\\n    @param _treasuryAddress treasury fund address\\n     */\\n    function setTreasuryAddress(address _treasuryAddress) external onlyAdmin {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    /**\\n    @notice deploy a new Curve metapools for uAD Token uAD/3Pool\\n    @dev  From the curve documentation for uncollateralized algorithmic\\n    stablecoins amplification should be 5-10\\n    @param _curveFactory MetaPool factory address\\n    @param _crvBasePool Address of the base pool to use within the new metapool.\\n    @param _crv3PoolTokenAddress curve 3Pool token Address\\n    @param _amplificationCoefficient amplification coefficient. The smaller\\n     it is the closer to a constant product we are.\\n    @param _fee Trade fee, given as an integer with 1e10 precision.\\n    */\\n    function deployStableSwapPool(\\n        address _curveFactory,\\n        address _crvBasePool,\\n        address _crv3PoolTokenAddress,\\n        uint256 _amplificationCoefficient,\\n        uint256 _fee\\n    ) external onlyAdmin {\\n        // Create new StableSwap meta pool (uAD <-> 3Crv)\\n        address metaPool =\\n            ICurveFactory(_curveFactory).deploy_metapool(\\n                _crvBasePool,\\n                ERC20(dollarTokenAddress).name(),\\n                ERC20(dollarTokenAddress).symbol(),\\n                dollarTokenAddress,\\n                _amplificationCoefficient,\\n                _fee\\n            );\\n        stableSwapMetaPoolAddress = metaPool;\\n\\n        // Approve the newly-deployed meta pool to transfer this contract's funds\\n        uint256 crv3PoolTokenAmount =\\n            IERC20(_crv3PoolTokenAddress).balanceOf(address(this));\\n        uint256 uADTokenAmount =\\n            IERC20(dollarTokenAddress).balanceOf(address(this));\\n\\n        // safe approve revert if approve from non-zero to non-zero allowance\\n        IERC20(_crv3PoolTokenAddress).safeApprove(metaPool, 0);\\n        IERC20(_crv3PoolTokenAddress).safeApprove(\\n            metaPool,\\n            crv3PoolTokenAmount\\n        );\\n\\n        IERC20(dollarTokenAddress).safeApprove(metaPool, 0);\\n        IERC20(dollarTokenAddress).safeApprove(metaPool, uADTokenAmount);\\n\\n        // coin at index 0 is uAD and index 1 is 3CRV\\n        require(\\n            IMetaPool(metaPool).coins(0) == dollarTokenAddress &&\\n                IMetaPool(metaPool).coins(1) == _crv3PoolTokenAddress,\\n            \\\"uADMGR: COIN_ORDER_MISMATCH\\\"\\n        );\\n        // Add the initial liquidity to the StableSwap meta pool\\n        uint256[2] memory amounts =\\n            [\\n                IERC20(dollarTokenAddress).balanceOf(address(this)),\\n                IERC20(_crv3PoolTokenAddress).balanceOf(address(this))\\n            ];\\n\\n        // set curve 3Pool address\\n        curve3PoolTokenAddress = _crv3PoolTokenAddress;\\n        IMetaPool(metaPool).add_liquidity(amounts, 0, msg.sender);\\n    }\\n\\n    function getExcessDollarsDistributor(address _debtCouponManagerAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _excessDollarDistributors[_debtCouponManagerAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xc86d80999cdfecfd7228760b8f80d76a9081b40e00b978ac9ae7021a46db56d9\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\\npragma solidity ^0.8.3;\\n\\ninterface ICurveFactory {\\n    event BasePoolAdded(address base_pool, address implementat);\\n    event MetaPoolDeployed(\\n        address coin,\\n        address base_pool,\\n        uint256 A,\\n        uint256 fee,\\n        address deployer\\n    );\\n\\n    function find_pool_for_coins(address _from, address _to)\\n        external\\n        view\\n        returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 i\\n    ) external view returns (address);\\n\\n    function get_n_coins(address _pool)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function get_coins(address _pool) external view returns (address[2] memory);\\n\\n    function get_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_underlying_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_underlying_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_fees(address _pool) external view returns (uint256, uint256);\\n\\n    function get_admin_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function add_base_pool(\\n        address _base_pool,\\n        address _metapool_implementation,\\n        address _fee_receiver\\n    ) external;\\n\\n    function deploy_metapool(\\n        address _base_pool,\\n        string memory _name,\\n        string memory _symbol,\\n        address _coin,\\n        uint256 _A,\\n        uint256 _fee\\n    ) external returns (address);\\n\\n    function commit_transfer_ownership(address addr) external;\\n\\n    function accept_transfer_ownership() external;\\n\\n    function set_fee_receiver(address _base_pool, address _fee_receiver)\\n        external;\\n\\n    function convert_fees() external returns (bool);\\n\\n    function admin() external view returns (address);\\n\\n    function future_admin() external view returns (address);\\n\\n    function pool_list(uint256 arg0) external view returns (address);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function base_pool_list(uint256 arg0) external view returns (address);\\n\\n    function base_pool_count() external view returns (uint256);\\n\\n    function fee_receiver(address arg0) external view returns (address);\\n}\\n\",\"keccak256\":\"0xcb339cf4aab1d3b5e35f541b496ffba0b9ca6a5e1da6dfbe9d03cde693d2f10e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Ubiquity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ERC20 Ubiquiti preset interface\\n/// @author Ubiquity Algorithmic Dollar\\ninterface IERC20Ubiquity is IERC20 {\\n    // ----------- Events -----------\\n    event Minting(\\n        address indexed _to,\\n        address indexed _minter,\\n        uint256 _amount\\n    );\\n\\n    event Burning(address indexed _burned, uint256 _amount);\\n\\n    // ----------- State changing api -----------\\n    function burn(uint256 amount) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Burner only state changing api -----------\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    // ----------- Minter only state changing api -----------\\n    function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf1170e23d8c1c05ecb677a1417bd13a646383544e292100edd7da32fb2188d91\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IExcessDollarsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/// @title A mechanism for distributing excess dollars to relevant places\\ninterface IExcessDollarsDistributor {\\n    function distributeDollars() external;\\n}\\n\",\"keccak256\":\"0x9017fd1bdbe37469905c85a4e6d71a177881c5e56b411a22acc03802c0c89ed1\",\"license\":\"MIT\"},\"contracts/interfaces/IMetaPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\\npragma solidity ^0.8.3;\\n\\ninterface IMetaPool {\\n    event Transfer(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 value\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event TokenExchange(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event TokenExchangeUnderlying(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 token_amount,\\n        uint256 coin_amount,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event CommitNewAdmin(uint256 indexed deadline, address indexed admin);\\n    event NewAdmin(address indexed admin);\\n    event CommitNewFee(\\n        uint256 indexed deadline,\\n        uint256 fee,\\n        uint256 admin_fee\\n    );\\n    event NewFee(uint256 fee, uint256 admin_fee);\\n    event RampA(\\n        uint256 old_A,\\n        uint256 new_A,\\n        uint256 initial_time,\\n        uint256 future_time\\n    );\\n    event StopRampA(uint256 A, uint256 t);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _coin,\\n        uint256 _decimals,\\n        uint256 _A,\\n        uint256 _fee,\\n        address _admin\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function get_previous_balances() external view returns (uint256[2] memory);\\n\\n    function get_balances() external view returns (uint256[2] memory);\\n\\n    function get_twap_balances(\\n        uint256[2] memory _first_balances,\\n        uint256[2] memory _last_balances,\\n        uint256 _time_elapsed\\n    ) external view returns (uint256[2] memory);\\n\\n    function get_price_cumulative_last()\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory _amounts,\\n        bool _is_deposit,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory _amounts,\\n        uint256 _min_mint_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256[2] memory _balances\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256[2] memory _balances\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts\\n    ) external returns (uint256[2] memory);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts,\\n        address _receiver\\n    ) external returns (uint256[2] memory);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function ramp_A(uint256 _future_A, uint256 _future_time) external;\\n\\n    function stop_ramp_A() external;\\n\\n    function admin_balances(uint256 i) external view returns (uint256);\\n\\n    function withdraw_admin_fees() external;\\n\\n    function admin() external view returns (address);\\n\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    function balances(uint256 arg0) external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function block_timestamp_last() external view returns (uint256);\\n\\n    function initial_A() external view returns (uint256);\\n\\n    function future_A() external view returns (uint256);\\n\\n    function initial_A_time() external view returns (uint256);\\n\\n    function future_A_time() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function allowance(address arg0, address arg1)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc89cc32a2a8a0336c380ed2ae3c3b5a9292cf1cd431cc09dec4d3057389ed893\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUbiquityAlgorithmicDollar.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IERC20Ubiquity.sol\\\";\\n\\n/// @title UAD stablecoin interface\\n/// @author Ubiquity Algorithmic Dollar\\ninterface IUbiquityAlgorithmicDollar is IERC20Ubiquity {\\n    event IncentiveContractUpdate(\\n        address indexed _incentivized,\\n        address indexed _incentiveContract\\n    );\\n\\n    function setIncentiveContract(address account, address incentive) external;\\n\\n    function incentiveContract(address account) external view returns (address);\\n}\\n\",\"keccak256\":\"0x34469f12207adbfd6003ce7710ddc7b0ee3c1637b5d7fbac2b35c9e3fe3b6182\",\"license\":\"Apache-2.0\"},\"contracts/libs/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n    /*\\n     * 0.\\n     */\\n    bytes16 private constant _POSITIVE_ZERO =\\n        0x00000000000000000000000000000000;\\n\\n    /*\\n     * -0.\\n     */\\n    bytes16 private constant _NEGATIVE_ZERO =\\n        0x80000000000000000000000000000000;\\n\\n    /*\\n     * +Infinity.\\n     */\\n    bytes16 private constant _POSITIVE_INFINITY =\\n        0x7FFF0000000000000000000000000000;\\n\\n    /*\\n     * -Infinity.\\n     */\\n    bytes16 private constant _NEGATIVE_INFINITY =\\n        0xFFFF0000000000000000000000000000;\\n\\n    /*\\n     * Canonical NaN value.\\n     */\\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n    /**\\n     * Convert signed 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromInt(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16383 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 256-bit integer number\\n     * rounding towards zero.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 256-bit integer number\\n     */\\n    function toInt(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16638); // Overflow\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            uint256 result =\\n                (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(\\n                    result <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    result <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                uint256 result = x;\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16383 + msb) << 112);\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into unsigned 256-bit integer number\\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n     * without error, because they are rounded to zero.\\n     *\\n     * @param x quadruple precision number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function toUInt(bytes16 x) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\\n\\n            require(exponent <= 16638); // Overflow\\n            uint256 result =\\n                (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 128.128 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from128x128(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16255 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 128.128 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 128.128 bit fixed point number\\n     */\\n    function to128x128(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16510); // Overflow\\n            if (exponent < 16255) return 0; // Underflow\\n\\n            uint256 result =\\n                (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    0x10000000000000000000000000000;\\n\\n            if (exponent < 16367) result >>= 16367 - exponent;\\n            else if (exponent > 16367) result <<= exponent - 16367;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(\\n                    result <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    result <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 64.64 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from64x64(int128 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint128(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16319 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 64.64 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 64.64 bit fixed point number\\n     */\\n    function to64x64(bytes16 x) internal pure returns (int128) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16446); // Overflow\\n            if (exponent < 16319) return 0; // Underflow\\n\\n            uint256 result =\\n                (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    0x10000000000000000000000000000;\\n\\n            if (exponent < 16431) result >>= 16431 - exponent;\\n            else if (exponent > 16431) result <<= exponent - 16431;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x80000000000000000000000000000000);\\n                return -int128(int256(result)); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(int256(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert octuple precision number into quadruple precision number.\\n     *\\n     * @param x octuple precision number\\n     * @return quadruple precision number\\n     */\\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool negative =\\n                x &\\n                    0x8000000000000000000000000000000000000000000000000000000000000000 >\\n                    0;\\n\\n            uint256 exponent = (uint256(x) >> 236) & 0x7FFFF;\\n            uint256 significand =\\n                uint256(x) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFFF) {\\n                if (significand > 0) return NaN;\\n                else return negative ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n            }\\n\\n            if (exponent > 278526)\\n                return negative ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n            else if (exponent < 245649)\\n                return negative ? _NEGATIVE_ZERO : _POSITIVE_ZERO;\\n            else if (exponent < 245761) {\\n                significand =\\n                    (significand |\\n                        0x100000000000000000000000000000000000000000000000000000000000) >>\\n                    (245885 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 124;\\n                exponent -= 245760;\\n            }\\n\\n            uint128 result = uint128(significand | (exponent << 112));\\n            if (negative) result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into octuple precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return octuple precision number\\n     */\\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF)\\n                exponent = 0x7FFFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result =\\n                        (result << (236 - msb)) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 245649 + msb;\\n                }\\n            } else {\\n                result <<= 124;\\n                exponent += 245760;\\n            }\\n\\n            result |= exponent << 236;\\n            if (uint128(x) >= 0x80000000000000000000000000000000)\\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n            return bytes32(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert double precision number into quadruple precision number.\\n     *\\n     * @param x double precision number\\n     * @return quadruple precision number\\n     */\\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 exponent = (uint64(x) >> 52) & 0x7FF;\\n\\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FF)\\n                exponent = 0x7FFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result =\\n                        (result << (112 - msb)) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 15309 + msb;\\n                }\\n            } else {\\n                result <<= 60;\\n                exponent += 15360;\\n            }\\n\\n            result |= exponent << 112;\\n            if (x & 0x8000000000000000 > 0)\\n                result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(uint128(result));\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into double precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return double precision number\\n     */\\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\\n        unchecked {\\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\\n\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                if (significand > 0) return 0x7FF8000000000000;\\n                // NaN\\n                else\\n                    return\\n                        negative\\n                            ? bytes8(0xFFF0000000000000) // -Infinity\\n                            : bytes8(0x7FF0000000000000); // Infinity\\n            }\\n\\n            if (exponent > 17406)\\n                return\\n                    negative\\n                        ? bytes8(0xFFF0000000000000) // -Infinity\\n                        : bytes8(0x7FF0000000000000);\\n            // Infinity\\n            else if (exponent < 15309)\\n                return\\n                    negative\\n                        ? bytes8(0x8000000000000000) // -0\\n                        : bytes8(0x0000000000000000);\\n            // 0\\n            else if (exponent < 15361) {\\n                significand =\\n                    (significand | 0x10000000000000000000000000000) >>\\n                    (15421 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 60;\\n                exponent -= 15360;\\n            }\\n\\n            uint64 result = uint64(significand | (exponent << 52));\\n            if (negative) result |= 0x8000000000000000;\\n\\n            return bytes8(result);\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is NaN, false otherwise\\n     */\\n    function isNaN(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n                0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is positive or negative\\n     * infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is positive or negative infinity, false otherwise\\n     */\\n    function isInfinity(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n                0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return sign of x\\n     */\\n    function sign(bytes16 x) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            if (absoluteX == 0) return 0;\\n            else if (uint128(x) >= 0x80000000000000000000000000000000)\\n                return -1;\\n            else return 1;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n     * arguments are infinities of the same sign.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return sign (x - y)\\n     */\\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            // Not infinities of the same sign\\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n            if (x == y) return 0;\\n            else {\\n                bool negativeX =\\n                    uint128(x) >= 0x80000000000000000000000000000000;\\n                bool negativeY =\\n                    uint128(y) >= 0x80000000000000000000000000000000;\\n\\n                if (negativeX) {\\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\\n                    else return -1;\\n                } else {\\n                    if (negativeY) return 1;\\n                    else return absoluteX > absoluteY ? int8(1) : -1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n     * anything.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return true if x equals to y, false otherwise\\n     */\\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\\n        unchecked {\\n            if (x == y) {\\n                return\\n                    uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n                    0x7FFF0000000000000000000000000000;\\n            } else return false;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Special values behave in the following way:\\n     *\\n     * NaN + x = NaN for any x.\\n     * Infinity + x = Infinity for any finite x.\\n     * -Infinity + x = -Infinity for any finite x.\\n     * Infinity + Infinity = Infinity.\\n     * -Infinity + -Infinity = -Infinity.\\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x;\\n                    else return NaN;\\n                } else return x;\\n            } else if (yExponent == 0x7FFF) return y;\\n            else {\\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\\n                uint256 xSignifier =\\n                    uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\\n                uint256 ySignifier =\\n                    uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                if (xSignifier == 0)\\n                    return y == _NEGATIVE_ZERO ? _POSITIVE_ZERO : y;\\n                else if (ySignifier == 0)\\n                    return x == _NEGATIVE_ZERO ? _POSITIVE_ZERO : x;\\n                else {\\n                    int256 delta = int256(xExponent) - int256(yExponent);\\n\\n                    if (xSign == ySign) {\\n                        if (delta > 112) return x;\\n                        else if (delta > 0) ySignifier >>= uint256(delta);\\n                        else if (delta < -112) return y;\\n                        else if (delta < 0) {\\n                            xSignifier >>= uint256(-delta);\\n                            xExponent = yExponent;\\n                        }\\n\\n                        xSignifier += ySignifier;\\n\\n                        if (xSignifier >= 0x20000000000000000000000000000) {\\n                            xSignifier >>= 1;\\n                            xExponent += 1;\\n                        }\\n\\n                        if (xExponent == 0x7FFF)\\n                            return\\n                                xSign ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n                        else {\\n                            if (xSignifier < 0x10000000000000000000000000000)\\n                                xExponent = 0;\\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (\\n                                            xSign\\n                                                ? 0x80000000000000000000000000000000\\n                                                : 0\\n                                        ) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                        }\\n                    } else {\\n                        if (delta > 0) {\\n                            xSignifier <<= 1;\\n                            xExponent -= 1;\\n                        } else if (delta < 0) {\\n                            ySignifier <<= 1;\\n                            xExponent = yExponent - 1;\\n                        }\\n\\n                        if (delta > 112) ySignifier = 1;\\n                        else if (delta > 1)\\n                            ySignifier =\\n                                ((ySignifier - 1) >> uint256(delta - 1)) +\\n                                1;\\n                        else if (delta < -112) xSignifier = 1;\\n                        else if (delta < -1)\\n                            xSignifier =\\n                                ((xSignifier - 1) >> uint256(-delta - 1)) +\\n                                1;\\n\\n                        if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n                        else {\\n                            xSignifier = ySignifier - xSignifier;\\n                            xSign = ySign;\\n                        }\\n\\n                        if (xSignifier == 0) return _POSITIVE_ZERO;\\n\\n                        uint256 msb = mostSignificantBit(xSignifier);\\n\\n                        if (msb == 113) {\\n                            xSignifier =\\n                                (xSignifier >> 1) &\\n                                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                            xExponent += 1;\\n                        } else if (msb < 112) {\\n                            uint256 shift = 112 - msb;\\n                            if (xExponent > shift) {\\n                                xSignifier =\\n                                    (xSignifier << shift) &\\n                                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                                xExponent -= shift;\\n                            } else {\\n                                xSignifier <<= xExponent - 1;\\n                                xExponent = 0;\\n                            }\\n                        } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                        if (xExponent == 0x7FFF)\\n                            return\\n                                xSign ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n                        else\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (\\n                                            xSign\\n                                                ? 0x80000000000000000000000000000000\\n                                                : 0\\n                                        ) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Special values behave in the following way:\\n     *\\n     * NaN - x = NaN for any x.\\n     * Infinity - x = Infinity for any finite x.\\n     * -Infinity - x = -Infinity for any finite x.\\n     * Infinity - -Infinity = Infinity.\\n     * -Infinity - Infinity = -Infinity.\\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {return add(x, y ^ 0x80000000000000000000000000000000);}\\n    }\\n\\n    /**\\n     * Calculate x * y.  Special values behave in the following way:\\n     *\\n     * NaN * x = NaN for any x.\\n     * Infinity * x = Infinity for any finite positive x.\\n     * Infinity * x = -Infinity for any finite negative x.\\n     * -Infinity * x = -Infinity for any finite positive x.\\n     * -Infinity * x = Infinity for any finite negative x.\\n     * Infinity * 0 = NaN.\\n     * -Infinity * 0 = NaN.\\n     * Infinity * Infinity = Infinity.\\n     * Infinity * -Infinity = -Infinity.\\n     * -Infinity * Infinity = -Infinity.\\n     * -Infinity * -Infinity = Infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y)\\n                        return x ^ (y & 0x80000000000000000000000000000000);\\n                    else if (x ^ y == 0x80000000000000000000000000000000)\\n                        return x | y;\\n                    else return NaN;\\n                } else {\\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                    else return x ^ (y & 0x80000000000000000000000000000000);\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return y ^ (x & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 xSignifier =\\n                    uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 ySignifier =\\n                    uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                xSignifier *= ySignifier;\\n                if (xSignifier == 0)\\n                    return\\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\\n                            ? _NEGATIVE_ZERO\\n                            : _POSITIVE_ZERO;\\n\\n                xExponent += yExponent;\\n\\n                uint256 msb =\\n                    xSignifier >=\\n                        0x200000000000000000000000000000000000000000000000000000000\\n                        ? 225\\n                        : xSignifier >=\\n                            0x100000000000000000000000000000000000000000000000000000000\\n                        ? 224\\n                        : mostSignificantBit(xSignifier);\\n\\n                if (xExponent + msb < 16496) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb < 16608) {\\n                    // Subnormal\\n                    if (xExponent < 16496) xSignifier >>= 16496 - xExponent;\\n                    else if (xExponent > 16496)\\n                        xSignifier <<= xExponent - 16496;\\n                    xExponent = 0;\\n                } else if (xExponent + msb > 49373) {\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else {\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n                    else if (msb < 112) xSignifier <<= 112 - msb;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb - 16607;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(\\n                            uint128(\\n                                (x ^ y) & 0x80000000000000000000000000000000\\n                            ) |\\n                                (xExponent << 112) |\\n                                xSignifier\\n                        )\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y.  Special values behave in the following way:\\n     *\\n     * NaN / x = NaN for any x.\\n     * x / NaN = NaN for any x.\\n     * Infinity / x = Infinity for any finite non-negative x.\\n     * Infinity / x = -Infinity for any finite negative x including -0.\\n     * -Infinity / x = -Infinity for any finite non-negative x.\\n     * -Infinity / x = Infinity for any finite negative x including -0.\\n     * x / Infinity = 0 for any finite non-negative x.\\n     * x / -Infinity = -0 for any finite non-negative x.\\n     * x / Infinity = -0 for any finite non-negative x including -0.\\n     * x / -Infinity = 0 for any finite non-negative x including -0.\\n     *\\n     * Infinity / Infinity = NaN.\\n     * Infinity / -Infinity = -NaN.\\n     * -Infinity / Infinity = -NaN.\\n     * -Infinity / -Infinity = NaN.\\n     *\\n     * Division by zero behaves in the following way:\\n     *\\n     * x / 0 = Infinity for any finite positive x.\\n     * x / -0 = -Infinity for any finite positive x.\\n     * x / 0 = -Infinity for any finite negative x.\\n     * x / -0 = Infinity for any finite negative x.\\n     * 0 / 0 = NaN.\\n     * 0 / -0 = NaN.\\n     * -0 / 0 = NaN.\\n     * -0 / -0 = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) return NaN;\\n                else return x ^ (y & 0x80000000000000000000000000000000);\\n            } else if (yExponent == 0x7FFF) {\\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n                else\\n                    return\\n                        _POSITIVE_ZERO |\\n                        ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else\\n                    return\\n                        _POSITIVE_INFINITY |\\n                        ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 ySignifier =\\n                    uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 xSignifier =\\n                    uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) {\\n                    if (xSignifier != 0) {\\n                        uint256 shift = 226 - mostSignificantBit(xSignifier);\\n\\n                        xSignifier <<= shift;\\n\\n                        xExponent = 1;\\n                        yExponent += shift - 114;\\n                    }\\n                } else {\\n                    xSignifier =\\n                        (xSignifier | 0x10000000000000000000000000000) <<\\n                        114;\\n                }\\n\\n                xSignifier = xSignifier / ySignifier;\\n                if (xSignifier == 0)\\n                    return\\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\\n                            ? _NEGATIVE_ZERO\\n                            : _POSITIVE_ZERO;\\n\\n                assert(xSignifier >= 0x1000000000000000000000000000);\\n\\n                uint256 msb =\\n                    xSignifier >= 0x80000000000000000000000000000\\n                        ? mostSignificantBit(xSignifier)\\n                        : xSignifier >= 0x40000000000000000000000000000\\n                        ? 114\\n                        : xSignifier >= 0x20000000000000000000000000000\\n                        ? 113\\n                        : 112;\\n\\n                if (xExponent + msb > yExponent + 16497) {\\n                    // Overflow\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16380 < yExponent) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16268 < yExponent) {\\n                    // Subnormal\\n                    if (xExponent + 16380 > yExponent)\\n                        xSignifier <<= xExponent + 16380 - yExponent;\\n                    else if (xExponent + 16380 < yExponent)\\n                        xSignifier >>= yExponent - xExponent - 16380;\\n\\n                    xExponent = 0;\\n                } else {\\n                    // Normal\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb + 16269 - yExponent;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(\\n                            uint128(\\n                                (x ^ y) & 0x80000000000000000000000000000000\\n                            ) |\\n                                (xExponent << 112) |\\n                                xSignifier\\n                        )\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function neg(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {return x ^ 0x80000000000000000000000000000000;}\\n    }\\n\\n    /**\\n     * Calculate |x|.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function abs(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;}\\n    }\\n\\n    /**\\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier =\\n                        uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return _POSITIVE_ZERO;\\n\\n                    bool oddExponent = xExponent & 0x1 == 0;\\n                    xExponent = (xExponent + 16383) >> 1;\\n\\n                    if (oddExponent) {\\n                        if (xSignifier >= 0x10000000000000000000000000000)\\n                            xSignifier <<= 113;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (226 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    } else {\\n                        if (xSignifier >= 0x10000000000000000000000000000)\\n                            xSignifier <<= 112;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (225 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    }\\n\\n                    uint256 r = 0x10000000000000000000000000000;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n                    uint256 r1 = xSignifier / r;\\n                    if (r1 < r) r = r1;\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (xExponent << 112) |\\n                                    (r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function log_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else if (x == 0x3FFF0000000000000000000000000000)\\n                return _POSITIVE_ZERO;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier =\\n                        uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return _NEGATIVE_INFINITY;\\n\\n                    bool resultNegative;\\n                    uint256 resultExponent = 16495;\\n                    uint256 resultSignifier;\\n\\n                    if (xExponent >= 0x3FFF) {\\n                        resultNegative = false;\\n                        resultSignifier = xExponent - 0x3FFF;\\n                        xSignifier <<= 15;\\n                    } else {\\n                        resultNegative = true;\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            resultSignifier = 0x3FFE - xExponent;\\n                            xSignifier <<= 15;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            resultSignifier = 16493 - msb;\\n                            xSignifier <<= 127 - msb;\\n                        }\\n                    }\\n\\n                    if (xSignifier == 0x80000000000000000000000000000000) {\\n                        if (resultNegative) resultSignifier += 1;\\n                        uint256 shift =\\n                            112 - mostSignificantBit(resultSignifier);\\n                        resultSignifier <<= shift;\\n                        resultExponent -= shift;\\n                    } else {\\n                        uint256 bb = resultNegative ? 1 : 0;\\n                        while (\\n                            resultSignifier < 0x10000000000000000000000000000\\n                        ) {\\n                            resultSignifier <<= 1;\\n                            resultExponent -= 1;\\n\\n                            xSignifier *= xSignifier;\\n                            uint256 b = xSignifier >> 255;\\n                            resultSignifier += b ^ bb;\\n                            xSignifier >>= 127 + b;\\n                        }\\n                    }\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (\\n                                    resultNegative\\n                                        ? 0x80000000000000000000000000000000\\n                                        : 0\\n                                ) |\\n                                    (resultExponent << 112) |\\n                                    (resultSignifier &\\n                                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function ln(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);}\\n    }\\n\\n    /**\\n     * Calculate 2^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n            else if (xExponent > 16397)\\n                return xNegative ? _POSITIVE_ZERO : _POSITIVE_INFINITY;\\n            else if (xExponent < 16255)\\n                return 0x3FFF0000000000000000000000000000;\\n            else {\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                if (xExponent > 16367) xSignifier <<= xExponent - 16367;\\n                else if (xExponent < 16367) xSignifier >>= 16367 - xExponent;\\n\\n                if (\\n                    xNegative &&\\n                    xSignifier > 0x406E00000000000000000000000000000000\\n                ) return _POSITIVE_ZERO;\\n\\n                if (\\n                    !xNegative &&\\n                    xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                ) return _POSITIVE_INFINITY;\\n\\n                uint256 resultExponent = xSignifier >> 128;\\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xNegative && xSignifier != 0) {\\n                    xSignifier = ~xSignifier;\\n                    resultExponent += 1;\\n                }\\n\\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\\n                if (xSignifier & 0x80000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x16A09E667F3BCC908B2FB1366EA957D3E) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1306FE0A31B7152DE8D5A46305C85EDEC) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1172B83C7D517ADCDF7C8C50EB14A791F) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10B5586CF9890F6298B92B71842A98363) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1059B0D31585743AE7C548EB68CA417FD) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x102C9A3E778060EE6F7CACA4F7A29BDE8) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10163DA9FB33356D84A66AE336DCDFA3F) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100B1AFA5ABCBED6129AB13EC11DC9543) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10058C86DA1C09EA1FF19D294CF2F679B) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1002C605E2E8CEC506D21BFC89A23A00F) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100162F3904051FA128BCA9C55C31E5DF) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000B175EFFDC76BA38E31671CA939725) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100058BA01FB9F96D6CACD4B180917C3D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10002C5CC37DA9491D0985C348C68E7B3) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000162E525EE054754457D5995292026) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000B17255775C040618BF4A4ADE83FC) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000162E43F4F831060E02D839A9D16D) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000B1721BCFC99D9F890EA06911763) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000058B90CF1E6D97F9CA14DBCC1628) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000002C5C863B73F016468F6BAC5CA2B) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000162E430E5A18F6119E3C02282A5) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000B1721835514B86E6D96EFD1BFE) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000058B90C0B48C6BE5DF846C5B2EF) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000002C5C8601CC6B9E94213C72737A) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000162E42FFF037DF38AA2B219F06) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000B17217FBA9C739AA5819F44F9) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000058B90BFCDEE5ACD3C1CEDC823) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000002C5C85FE31F35A6A30DA1BE50) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000162E42FF0999CE3541B9FFFCF) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000B17217F80F4EF5AADDA45554) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000058B90BFBF8479BD5A81B51AD) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000002C5C85FDF84BD62AE30A74CC) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000162E42FEFB2FED257559BDAA) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000B17217F7D5A7716BBA4A9AE) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000058B90BFBE9DDBAC5E109CCE) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000002C5C85FDF4B15DE6F17EB0D) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000162E42FEFA494F1478FDE05) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000B17217F7D20CF927C8E94C) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000058B90BFBE8F71CB4E4B33D) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000002C5C85FDF477B662B26945) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000162E42FEFA3AE53369388C) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000B17217F7D1D351A389D40) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000058B90BFBE8E8B2D3D4EDE) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000002C5C85FDF4741BEA6E77E) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000162E42FEFA39FE95583C2) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000B17217F7D1CFB72B45E1) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000058B90BFBE8E7CC35C3F0) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000002C5C85FDF473E242EA38) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000162E42FEFA39F02B772C) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000B17217F7D1CF7D83C1A) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000058B90BFBE8E7BDCBE2E) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000002C5C85FDF473DEA871F) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000162E42FEFA39EF44D91) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000B17217F7D1CF79E949) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000058B90BFBE8E7BCE544) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000002C5C85FDF473DE6ECA) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000162E42FEFA39EF366F) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000B17217F7D1CF79AFA) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000058B90BFBE8E7BCD6D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000002C5C85FDF473DE6B2) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000162E42FEFA39EF358) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000B17217F7D1CF79AB) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000058B90BFBE8E7BCD5) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000002C5C85FDF473DE6A) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000162E42FEFA39EF34) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000B17217F7D1CF799) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000058B90BFBE8E7BCC) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000002C5C85FDF473DE5) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000162E42FEFA39EF2) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000B17217F7D1CF78) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000058B90BFBE8E7BB) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000002C5C85FDF473DD) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000162E42FEFA39EE) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000B17217F7D1CF6) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000058B90BFBE8E7A) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000002C5C85FDF473C) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000162E42FEFA39D) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000B17217F7D1CE) >>\\n                        128;\\n                if (xSignifier & 0x800000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000058B90BFBE8E6) >>\\n                        128;\\n                if (xSignifier & 0x400000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000002C5C85FDF472) >>\\n                        128;\\n                if (xSignifier & 0x200000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000162E42FEFA38) >>\\n                        128;\\n                if (xSignifier & 0x100000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000B17217F7D1B) >>\\n                        128;\\n                if (xSignifier & 0x80000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000058B90BFBE8D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000002C5C85FDF46) >>\\n                        128;\\n                if (xSignifier & 0x20000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000162E42FEFA2) >>\\n                        128;\\n                if (xSignifier & 0x10000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000B17217F7D0) >>\\n                        128;\\n                if (xSignifier & 0x8000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000058B90BFBE7) >>\\n                        128;\\n                if (xSignifier & 0x4000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000002C5C85FDF3) >>\\n                        128;\\n                if (xSignifier & 0x2000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000162E42FEF9) >>\\n                        128;\\n                if (xSignifier & 0x1000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000B17217F7C) >>\\n                        128;\\n                if (xSignifier & 0x800000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000058B90BFBD) >>\\n                        128;\\n                if (xSignifier & 0x400000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000002C5C85FDE) >>\\n                        128;\\n                if (xSignifier & 0x200000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000162E42FEE) >>\\n                        128;\\n                if (xSignifier & 0x100000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000B17217F6) >>\\n                        128;\\n                if (xSignifier & 0x80000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000058B90BFA) >>\\n                        128;\\n                if (xSignifier & 0x40000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000002C5C85FC) >>\\n                        128;\\n                if (xSignifier & 0x20000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000162E42FD) >>\\n                        128;\\n                if (xSignifier & 0x10000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000B17217E) >>\\n                        128;\\n                if (xSignifier & 0x8000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000058B90BE) >>\\n                        128;\\n                if (xSignifier & 0x4000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000002C5C85E) >>\\n                        128;\\n                if (xSignifier & 0x2000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000162E42E) >>\\n                        128;\\n                if (xSignifier & 0x1000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000B17216) >>\\n                        128;\\n                if (xSignifier & 0x800000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000058B90A) >>\\n                        128;\\n                if (xSignifier & 0x400000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000002C5C84) >>\\n                        128;\\n                if (xSignifier & 0x200000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000162E41) >>\\n                        128;\\n                if (xSignifier & 0x100000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000B1720) >>\\n                        128;\\n                if (xSignifier & 0x80000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000058B8F) >>\\n                        128;\\n                if (xSignifier & 0x40000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000002C5C7) >>\\n                        128;\\n                if (xSignifier & 0x20000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000162E3) >>\\n                        128;\\n                if (xSignifier & 0x10000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000B171) >>\\n                        128;\\n                if (xSignifier & 0x8000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000058B8) >>\\n                        128;\\n                if (xSignifier & 0x4000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000002C5B) >>\\n                        128;\\n                if (xSignifier & 0x2000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000162D) >>\\n                        128;\\n                if (xSignifier & 0x1000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000B16) >>\\n                        128;\\n                if (xSignifier & 0x800 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000058A) >>\\n                        128;\\n                if (xSignifier & 0x400 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000002C4) >>\\n                        128;\\n                if (xSignifier & 0x200 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000161) >>\\n                        128;\\n                if (xSignifier & 0x100 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000000B0) >>\\n                        128;\\n                if (xSignifier & 0x80 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000057) >>\\n                        128;\\n                if (xSignifier & 0x40 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000002B) >>\\n                        128;\\n                if (xSignifier & 0x20 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000015) >>\\n                        128;\\n                if (xSignifier & 0x10 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000000A) >>\\n                        128;\\n                if (xSignifier & 0x8 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000004) >>\\n                        128;\\n                if (xSignifier & 0x4 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000001) >>\\n                        128;\\n\\n                if (!xNegative) {\\n                    resultSignifier =\\n                        (resultSignifier >> 15) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent += 0x3FFF;\\n                } else if (resultExponent <= 0x3FFE) {\\n                    resultSignifier =\\n                        (resultSignifier >> 15) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent = 0x3FFF - resultExponent;\\n                } else {\\n                    resultSignifier =\\n                        resultSignifier >>\\n                        (resultExponent - 16367);\\n                    resultExponent = 0;\\n                }\\n\\n                return\\n                    bytes16(uint128((resultExponent << 112) | resultSignifier));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate e^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function exp(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));}\\n    }\\n\\n    /**\\n     * Get index of the most significant non-zero bit in binary representation of\\n     * x.  Reverts if x is zero.\\n     *\\n     * @return index of the most significant non-zero bit in binary representation\\n     *         of x\\n     */\\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            require(x > 0);\\n\\n            uint256 result = 0;\\n\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                result += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                result += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                result += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                result += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                result += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                result += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                result += 2;\\n            }\\n            if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf1ea6500a79e267f34706407d32ece0cfb98b500920d77f43d535ea267b1fbb4\",\"license\":\"BSD-4-Clause\"}},\"version\":1}",
  "bytecode": "0x60c060405268056bc75e2d631000006080527fd9e1ce17f2641f24ae83637ab66a2cca9c378b9f00000000000000000000000060a05234801561004157600080fd5b50604051611cb7380380611cb783398101604081905261006091610085565b600080546001600160a01b0319166001600160a01b03929092169190911790556100b3565b600060208284031215610096578081fd5b81516001600160a01b03811681146100ac578182fd5b9392505050565b60805160a05160601c611bb96100fe6000396000818161083f015281816108fa01528181610978015281816109eb01528181610a5901526116cd015260006101780152611bb96000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063481c6a751461003b578063651156bc1461006a575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610072610074565b005b60008060009054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c357600080fd5b505afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb91906118d2565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561013c57600080fd5b505afa158015610150573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017491906119d9565b90507f00000000000000000000000000000000000000000000000000000000000000008111156103385760008060009054906101000a90046001600160a01b03166001600160a01b031663c5f956af6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ed57600080fd5b505afa158015610201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022591906118d2565b9050600061027361025b610239600a61033b565b6102428661033b565b6fffffffffffffffffffffffffffffffff1916906103a8565b6fffffffffffffffffffffffffffffffff19166106f3565b905061030e828260008054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c657600080fd5b505afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906118d2565b6001600160a01b0316919061078b565b61031781610820565b610334816103258186611b3d565b61032f9190611b3d565b610c89565b5050505b50565b60008161034a575060006103a3565b8160006103568261125e565b9050607081101561036f578060700382901b9150610382565b6070811115610382576070810382901c91505b613fff0160701b6dffffffffffffffffffffffffffff919091161760801b90505b919050565b6000617fff60f084811c8216919084901c8116908214156103ee5780617fff14156103dd575061ffff60ef1b91506106ed9050565b505050600160ff1b811682186106ed565b80617fff141561043f577dffffffffffffffffffffffffffff0000000000000000000000000000000084161561042e575061ffff60ef1b91506106ed9050565b505050808218600160ff1b166106ed565b6f7fffffffffffffffffffffffffffffff60801b841661049b576f7fffffffffffffffffffffffffffffff60801b8516610483575061ffff60ef1b91506106ed9050565b505050808218600160ff1b16617fff60f01b176106ed565b6dffffffffffffffffffffffffffff608085901c16816104be57600191506104c5565b600160701b175b6dffffffffffffffffffffffffffff608087901c168361050b5780156105065760006104f08261125e565b6001955060e20393840160711901939190911b90505b610515565b600160701b1760721b5b81818161053257634e487b7160e01b600052601260045260246000fd5b0490508061055f57600160ff1b8787181661054e576000610554565b600160ff1b5b9450505050506106ed565b6d100000000000000000000000000081101561058b57634e487b7160e01b600052600160045260246000fd5b60006e0800000000000000000000000000008210156105ec576e0400000000000000000000000000008210156105e1576e0200000000000000000000000000008210156105d95760706105dc565b60715b6105e4565b60725b60ff166105f5565b6105f58261125e565b90508361407101818601111561061357617fff9450600091506106ad565b83818601613ffc01101561062e5760009450600091506106ad565b83818601613f8c01101561067b578385613ffc011115610659578385613ffc010382901b9150610672565b8385613ffc01101561067257613ffc8585030382901c91505b600094506106ad565b607081111561068e576070810382901c91505b6dffffffffffffffffffffffffffff8216915083818601613f8d010394505b81607086901b888a186f8000000000000000000000000000000060801b1660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b6000617fff60f083901c16613fff8110156107125760009150506103a3565b6f80000000000000000000000000000000608084901c1061073257600080fd5b6140fe81111561074157600080fd5b600160701b6dffffffffffffffffffffffffffff608085901c161761406f8210156107725761406f8290031c610784565b61406f8211156107845761406e1982011b5b9392505050565b6040516001600160a01b03831660248201526044810182905261081b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261130e565b505050565b600061083861082f600261033b565b6102428461033b565b90506108f57f000000000000000000000000000000000000000000000000000000000000000060008060009054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b505afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e591906118d2565b6001600160a01b031691906113f8565b6109667f00000000000000000000000000000000000000000000000000000000000000008360008054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b600061097182611523565b90506109e67f000000000000000000000000000000000000000000000000000000000000000060008060009054906101000a90046001600160a01b03166001600160a01b031663b42165d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b610a577f00000000000000000000000000000000000000000000000000000000000000008260008054906101000a90046001600160a01b03166001600160a01b031663b42165d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8e3370060008054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad257600080fd5b505afa158015610ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0a91906118d2565b60008054906101000a90046001600160a01b03166001600160a01b031663b42165d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e91906118d2565b610baa6fffffffffffffffffffffffffffffffff1987166106f3565b8560008080610bba426064611b25565b60405160e08a901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b158015610c4957600080fd5b505af1158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8191906119f1565b505050505050565b600080546040805163d3815fb960e01b81529051610d57926001600160a01b03169163d3815fb9916004808301926020929190829003018186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0891906118d2565b60008060009054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b6000546040805163d3815fb960e01b81529051610e19926001600160a01b03169163d3815fb9916004808301926020929190829003018186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906118d2565b60005460408051631787d40360e31b8152905186926001600160a01b03169163bc3ea018916004808301926020929190829003018186803b1580156108ad57600080fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663d3815fb96040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6857600080fd5b505afa158015610e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea091906118d2565b604051630f7c084960e21b8152600060048201819052600160248301526044820186905260648201526001600160a01b039190911690633df0212490608401602060405180830381600087803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3191906119d9565b905061100960008054906101000a90046001600160a01b03166001600160a01b031663d3815fb96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8257600080fd5b505afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba91906118d2565b60008060009054906101000a90046001600160a01b03166001600160a01b031663017df3276040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b6000546040805163d3815fb960e01b815290516110cb926001600160a01b03169163d3815fb9916004808301926020929190829003018186803b15801561104f57600080fd5b505afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108791906118d2565b6000546040805163017df32760e01b8152905185926001600160a01b03169163017df327916004808301926020929190829003018186803b1580156108ad57600080fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663d3815fb96040518163ffffffff1660e01b815260040160206040518083038186803b15801561111a57600080fd5b505afa15801561112e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115291906118d2565b604080518082018252600080825260208083018790528154845163de71c1db60e01b815294516001600160a01b0396871696630c3e4b549692169263de71c1db9260048082019391829003018186803b1580156111ae57600080fd5b505afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e691906118d2565b6040518463ffffffff1660e01b815260040161120493929190611a3a565b602060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125691906119d9565b949350505050565b600080821161126c57600080fd5b6000700100000000000000000000000000000000831061128e57608092831c92015b6801000000000000000083106112a657604092831c92015b64010000000083106112ba57602092831c92015b6201000083106112cc57601092831c92015b61010083106112dd57600892831c92015b601083106112ed57600492831c92015b600483106112fd57600292831c92015b600283106106ed5760010192915050565b6000611363826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117c79092919063ffffffff16565b80519091501561081b578080602001905181019061138191906119b9565b61081b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b8015806114815750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561144757600080fd5b505afa15801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f91906119d9565b155b6114f35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016113ef565b6040516001600160a01b03831660248201526044810182905261081b90849063095ea7b360e01b906064016107b7565b6040805160028082526060820183526000928392919060208301908036833701905050905060008054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b15801561159457600080fd5b505afa1580156115a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cc91906118d2565b816000815181106115ed57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060008054906101000a90046001600160a01b03166001600160a01b031663b42165d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561165957600080fd5b505afa15801561166d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169191906118d2565b816001815181106116b257634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526000907f0000000000000000000000000000000000000000000000000000000000000000166338ed173961170e6fffffffffffffffffffffffffffffffff1987166106f3565b6000853061171d426064611b25565b6040518663ffffffff1660e01b815260040161173d959493929190611ab5565b600060405180830381600087803b15801561175757600080fd5b505af115801561176b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179391908101906118f9565b9050806001815181106117b657634e487b7160e01b600052603260045260246000fd5b602002602001015192505050919050565b6060611256848460008585843b6118205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016113ef565b600080866001600160a01b0316858760405161183c9190611a1e565b60006040518083038185875af1925050503d8060008114611879576040519150601f19603f3d011682016040523d82523d6000602084013e61187e565b606091505b509150915061188e828286611899565b979650505050505050565b606083156118a8575081610784565b8251156118b85782518084602001fd5b8160405162461bcd60e51b81526004016113ef9190611a82565b6000602082840312156118e3578081fd5b81516001600160a01b0381168114610784578182fd5b6000602080838503121561190b578182fd5b825167ffffffffffffffff80821115611922578384fd5b818501915085601f830112611935578384fd5b81518181111561194757611947611b96565b8060051b604051601f19603f8301168101818110858211171561196c5761196c611b96565b604052828152858101935084860182860187018a101561198a578788fd5b8795505b838610156119ac57805185526001959095019493860193860161198e565b5098975050505050505050565b6000602082840312156119ca578081fd5b81518015158114610784578182fd5b6000602082840312156119ea578081fd5b5051919050565b600080600060608486031215611a05578182fd5b8351925060208401519150604084015190509250925092565b60008251611a30818460208701611b54565b9190910192915050565b60808101818560005b6002811015611a62578151835260209283019290910190600101611a43565b5050508360408301526001600160a01b0383166060830152949350505050565b6000602082528251806020840152611aa1816040850160208701611b54565b601f01601f19169190910160400192915050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611b045784516001600160a01b031683529383019391830191600101611adf565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115611b3857611b38611b80565b500190565b600082821015611b4f57611b4f611b80565b500390565b60005b83811015611b6f578181015183820152602001611b57565b838111156103345750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000803000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063481c6a751461003b578063651156bc1461006a575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610072610074565b005b60008060009054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c357600080fd5b505afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb91906118d2565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561013c57600080fd5b505afa158015610150573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017491906119d9565b90507f00000000000000000000000000000000000000000000000000000000000000008111156103385760008060009054906101000a90046001600160a01b03166001600160a01b031663c5f956af6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ed57600080fd5b505afa158015610201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022591906118d2565b9050600061027361025b610239600a61033b565b6102428661033b565b6fffffffffffffffffffffffffffffffff1916906103a8565b6fffffffffffffffffffffffffffffffff19166106f3565b905061030e828260008054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c657600080fd5b505afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906118d2565b6001600160a01b0316919061078b565b61031781610820565b610334816103258186611b3d565b61032f9190611b3d565b610c89565b5050505b50565b60008161034a575060006103a3565b8160006103568261125e565b9050607081101561036f578060700382901b9150610382565b6070811115610382576070810382901c91505b613fff0160701b6dffffffffffffffffffffffffffff919091161760801b90505b919050565b6000617fff60f084811c8216919084901c8116908214156103ee5780617fff14156103dd575061ffff60ef1b91506106ed9050565b505050600160ff1b811682186106ed565b80617fff141561043f577dffffffffffffffffffffffffffff0000000000000000000000000000000084161561042e575061ffff60ef1b91506106ed9050565b505050808218600160ff1b166106ed565b6f7fffffffffffffffffffffffffffffff60801b841661049b576f7fffffffffffffffffffffffffffffff60801b8516610483575061ffff60ef1b91506106ed9050565b505050808218600160ff1b16617fff60f01b176106ed565b6dffffffffffffffffffffffffffff608085901c16816104be57600191506104c5565b600160701b175b6dffffffffffffffffffffffffffff608087901c168361050b5780156105065760006104f08261125e565b6001955060e20393840160711901939190911b90505b610515565b600160701b1760721b5b81818161053257634e487b7160e01b600052601260045260246000fd5b0490508061055f57600160ff1b8787181661054e576000610554565b600160ff1b5b9450505050506106ed565b6d100000000000000000000000000081101561058b57634e487b7160e01b600052600160045260246000fd5b60006e0800000000000000000000000000008210156105ec576e0400000000000000000000000000008210156105e1576e0200000000000000000000000000008210156105d95760706105dc565b60715b6105e4565b60725b60ff166105f5565b6105f58261125e565b90508361407101818601111561061357617fff9450600091506106ad565b83818601613ffc01101561062e5760009450600091506106ad565b83818601613f8c01101561067b578385613ffc011115610659578385613ffc010382901b9150610672565b8385613ffc01101561067257613ffc8585030382901c91505b600094506106ad565b607081111561068e576070810382901c91505b6dffffffffffffffffffffffffffff8216915083818601613f8d010394505b81607086901b888a186f8000000000000000000000000000000060801b1660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b6000617fff60f083901c16613fff8110156107125760009150506103a3565b6f80000000000000000000000000000000608084901c1061073257600080fd5b6140fe81111561074157600080fd5b600160701b6dffffffffffffffffffffffffffff608085901c161761406f8210156107725761406f8290031c610784565b61406f8211156107845761406e1982011b5b9392505050565b6040516001600160a01b03831660248201526044810182905261081b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261130e565b505050565b600061083861082f600261033b565b6102428461033b565b90506108f57f000000000000000000000000000000000000000000000000000000000000000060008060009054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b505afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e591906118d2565b6001600160a01b031691906113f8565b6109667f00000000000000000000000000000000000000000000000000000000000000008360008054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b600061097182611523565b90506109e67f000000000000000000000000000000000000000000000000000000000000000060008060009054906101000a90046001600160a01b03166001600160a01b031663b42165d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b610a577f00000000000000000000000000000000000000000000000000000000000000008260008054906101000a90046001600160a01b03166001600160a01b031663b42165d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8e3370060008054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad257600080fd5b505afa158015610ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0a91906118d2565b60008054906101000a90046001600160a01b03166001600160a01b031663b42165d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e91906118d2565b610baa6fffffffffffffffffffffffffffffffff1987166106f3565b8560008080610bba426064611b25565b60405160e08a901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b158015610c4957600080fd5b505af1158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8191906119f1565b505050505050565b600080546040805163d3815fb960e01b81529051610d57926001600160a01b03169163d3815fb9916004808301926020929190829003018186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0891906118d2565b60008060009054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b6000546040805163d3815fb960e01b81529051610e19926001600160a01b03169163d3815fb9916004808301926020929190829003018186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906118d2565b60005460408051631787d40360e31b8152905186926001600160a01b03169163bc3ea018916004808301926020929190829003018186803b1580156108ad57600080fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663d3815fb96040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6857600080fd5b505afa158015610e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea091906118d2565b604051630f7c084960e21b8152600060048201819052600160248301526044820186905260648201526001600160a01b039190911690633df0212490608401602060405180830381600087803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3191906119d9565b905061100960008054906101000a90046001600160a01b03166001600160a01b031663d3815fb96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8257600080fd5b505afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba91906118d2565b60008060009054906101000a90046001600160a01b03166001600160a01b031663017df3276040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ad57600080fd5b6000546040805163d3815fb960e01b815290516110cb926001600160a01b03169163d3815fb9916004808301926020929190829003018186803b15801561104f57600080fd5b505afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108791906118d2565b6000546040805163017df32760e01b8152905185926001600160a01b03169163017df327916004808301926020929190829003018186803b1580156108ad57600080fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663d3815fb96040518163ffffffff1660e01b815260040160206040518083038186803b15801561111a57600080fd5b505afa15801561112e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115291906118d2565b604080518082018252600080825260208083018790528154845163de71c1db60e01b815294516001600160a01b0396871696630c3e4b549692169263de71c1db9260048082019391829003018186803b1580156111ae57600080fd5b505afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e691906118d2565b6040518463ffffffff1660e01b815260040161120493929190611a3a565b602060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125691906119d9565b949350505050565b600080821161126c57600080fd5b6000700100000000000000000000000000000000831061128e57608092831c92015b6801000000000000000083106112a657604092831c92015b64010000000083106112ba57602092831c92015b6201000083106112cc57601092831c92015b61010083106112dd57600892831c92015b601083106112ed57600492831c92015b600483106112fd57600292831c92015b600283106106ed5760010192915050565b6000611363826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117c79092919063ffffffff16565b80519091501561081b578080602001905181019061138191906119b9565b61081b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b8015806114815750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561144757600080fd5b505afa15801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f91906119d9565b155b6114f35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016113ef565b6040516001600160a01b03831660248201526044810182905261081b90849063095ea7b360e01b906064016107b7565b6040805160028082526060820183526000928392919060208301908036833701905050905060008054906101000a90046001600160a01b03166001600160a01b031663bc3ea0186040518163ffffffff1660e01b815260040160206040518083038186803b15801561159457600080fd5b505afa1580156115a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cc91906118d2565b816000815181106115ed57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060008054906101000a90046001600160a01b03166001600160a01b031663b42165d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561165957600080fd5b505afa15801561166d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169191906118d2565b816001815181106116b257634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526000907f0000000000000000000000000000000000000000000000000000000000000000166338ed173961170e6fffffffffffffffffffffffffffffffff1987166106f3565b6000853061171d426064611b25565b6040518663ffffffff1660e01b815260040161173d959493929190611ab5565b600060405180830381600087803b15801561175757600080fd5b505af115801561176b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179391908101906118f9565b9050806001815181106117b657634e487b7160e01b600052603260045260246000fd5b602002602001015192505050919050565b6060611256848460008585843b6118205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016113ef565b600080866001600160a01b0316858760405161183c9190611a1e565b60006040518083038185875af1925050503d8060008114611879576040519150601f19603f3d011682016040523d82523d6000602084013e61187e565b606091505b509150915061188e828286611899565b979650505050505050565b606083156118a8575081610784565b8251156118b85782518084602001fd5b8160405162461bcd60e51b81526004016113ef9190611a82565b6000602082840312156118e3578081fd5b81516001600160a01b0381168114610784578182fd5b6000602080838503121561190b578182fd5b825167ffffffffffffffff80821115611922578384fd5b818501915085601f830112611935578384fd5b81518181111561194757611947611b96565b8060051b604051601f19603f8301168101818110858211171561196c5761196c611b96565b604052828152858101935084860182860187018a101561198a578788fd5b8795505b838610156119ac57805185526001959095019493860193860161198e565b5098975050505050505050565b6000602082840312156119ca578081fd5b81518015158114610784578182fd5b6000602082840312156119ea578081fd5b5051919050565b600080600060608486031215611a05578182fd5b8351925060208401519150604084015190509250925092565b60008251611a30818460208701611b54565b9190910192915050565b60808101818560005b6002811015611a62578151835260209283019290910190600101611a43565b5050508360408301526001600160a01b0383166060830152949350505050565b6000602082528251806020840152611aa1816040850160208701611b54565b601f01601f19169190910160400192915050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611b045784516001600160a01b031683529383019391830191600101611adf565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115611b3857611b38611b80565b500190565b600082821015611b4f57611b4f611b80565b500390565b60005b83811015611b6f578181015183820152602001611b57565b838111156103345750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000803000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_manager": "the address of the manager contract so we can fetch variables"
        }
      }
    },
    "title": "An excess dollar distributor which sends dollars to treasury, lp rewards and inflation rewards",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8033,
        "contract": "contracts/ExcessDollarsDistributor.sol:ExcessDollarsDistributor",
        "label": "manager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(UbiquityAlgorithmicDollarManager)10304"
      }
    ],
    "types": {
      "t_contract(UbiquityAlgorithmicDollarManager)10304": {
        "encoding": "inplace",
        "label": "contract UbiquityAlgorithmicDollarManager",
        "numberOfBytes": "20"
      }
    }
  }
}
