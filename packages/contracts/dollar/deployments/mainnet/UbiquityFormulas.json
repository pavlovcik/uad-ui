{
  "address": "0x54F528979A50FA8Fe99E0118EbbEE5fC8Ea802F7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalULP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalUBOND",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetPrice",
          "type": "uint256"
        }
      ],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceUBOND",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentShareValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetPrice",
          "type": "uint256"
        }
      ],
      "name": "bonding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_uBOND",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_uLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_weeks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        }
      ],
      "name": "durationMultiply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_uBOND",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentShareValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetPrice",
          "type": "uint256"
        }
      ],
      "name": "redeemBonds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_uLP",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "ugovMultiply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_newMultiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b47a00e1f5ba0348cc54cdb108142b230cd6c788e737b42ea63928118fce6a5",
  "receipt": {
    "to": null,
    "from": "0xefC0e701A824943b469a694aC564Aa1efF7Ab7dd",
    "contractAddress": "0x54F528979A50FA8Fe99E0118EbbEE5fC8Ea802F7",
    "transactionIndex": 12,
    "gasUsed": "1019931",
    "logsBloom": "0x
    "blockHash": "0xb43b6b2a05537db13b89a51e8738d152970eb586a025fc2552ca2070bfc3fac0",
    "transactionHash": "0x0b47a00e1f5ba0348cc54cdb108142b230cd6c788e737b42ea63928118fce6a5",
    "logs": [],
    "blockNumber": 12595543,
    "cumulativeGasUsed": "2252845",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "718dfe5f2e9bb98c22443f71ab0527e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalULP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUBOND\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"}],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceUBOND\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentShareValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"}],\"name\":\"bonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_uBOND\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"durationMultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uBOND\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentShareValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_uLP\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"ugovMultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice(uint256,uint256,uint256)\":{\"details\":\"formula bond price\",\"params\":{\"_targetPrice\":\",  target uAD price\",\"_totalUBOND\":\", total bond shares\",\"_totalULP\":\", total LP tokens\"},\"returns\":{\"_priceUBOND\":\", bond share price\"}},\"bonding(uint256,uint256,uint256)\":{\"details\":\"formula bonding\",\"params\":{\"_currentShareValue\":\", current share value\",\"_shares\":\", amount of shares\",\"_targetPrice\":\", target uAD price\"},\"returns\":{\"_uBOND\":\", amount of bonding shares\"}},\"durationMultiply(uint256,uint256,uint256)\":{\"details\":\"formula duration multiply\",\"params\":{\"_multiplier\":\", bonding discount multiplier = 0.0001\",\"_uLP\":\", amount of LP tokens\",\"_weeks\":\", mimimun duration of staking period\"},\"returns\":{\"_shares\":\", amount of shares\"}},\"redeemBonds(uint256,uint256,uint256)\":{\"details\":\"formula redeem bonds\",\"params\":{\"_currentShareValue\":\", current share value\",\"_targetPrice\":\", target uAD price\",\"_uBOND\":\", amount of bonding shares\"},\"returns\":{\"_uLP\":\", amount of LP tokens\"}},\"ugovMultiply(uint256,uint256)\":{\"details\":\"formula ugov multiply\",\"params\":{\"_multiplier\":\", initial ugov min multiplier\",\"_price\":\", current share price\"},\"returns\":{\"_newMultiplier\":\", new ugov min multiplier\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bonding(uint256,uint256,uint256)\":{\"notice\":\"UBOND = _shares / _currentShareValue * _targetPrice\"},\"durationMultiply(uint256,uint256,uint256)\":{\"notice\":\"_shares = (1 + _multiplier * _weeks^3/2) * _uLP\"},\"redeemBonds(uint256,uint256,uint256)\":{\"notice\":\"_uLP = _uBOND * _currentShareValue / _targetPrice\"},\"ugovMultiply(uint256,uint256)\":{\"notice\":\"new_multiplier = multiplier * ( 1.05 / (1 + abs( 1 - price ) ) )\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UbiquityFormulas.sol\":\"UbiquityFormulas\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/UbiquityFormulas.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"./libs/ABDKMathQuad.sol\\\";\\n\\ncontract UbiquityFormulas {\\n    using ABDKMathQuad for uint256;\\n    using ABDKMathQuad for bytes16;\\n\\n    /// @dev formula duration multiply\\n    /// @param _uLP , amount of LP tokens\\n    /// @param _weeks , mimimun duration of staking period\\n    /// @param _multiplier , bonding discount multiplier = 0.0001\\n    /// @return _shares , amount of shares\\n    /// @notice _shares = (1 + _multiplier * _weeks^3/2) * _uLP\\n    //          D32 = D^3/2\\n    //          S = m * D32 * A + A\\n    function durationMultiply(\\n        uint256 _uLP,\\n        uint256 _weeks,\\n        uint256 _multiplier\\n    ) public pure returns (uint256 _shares) {\\n        bytes16 unit = uint256(1 ether).fromUInt();\\n        bytes16 d = _weeks.fromUInt();\\n        bytes16 d32 = (d.mul(d).mul(d)).sqrt();\\n        bytes16 m = _multiplier.fromUInt().div(unit); // 0.0001\\n        bytes16 a = _uLP.fromUInt();\\n\\n        _shares = m.mul(d32).mul(a).add(a).toUInt();\\n    }\\n\\n    /// @dev formula bonding\\n    /// @param _shares , amount of shares\\n    /// @param _currentShareValue , current share value\\n    /// @param _targetPrice , target uAD price\\n    /// @return _uBOND , amount of bonding shares\\n    /// @notice UBOND = _shares / _currentShareValue * _targetPrice\\n    // newShares = A / V * T\\n    function bonding(\\n        uint256 _shares,\\n        uint256 _currentShareValue,\\n        uint256 _targetPrice\\n    ) public pure returns (uint256 _uBOND) {\\n        bytes16 a = _shares.fromUInt();\\n        bytes16 v = _currentShareValue.fromUInt();\\n        bytes16 t = _targetPrice.fromUInt();\\n\\n        _uBOND = a.div(v).mul(t).toUInt();\\n    }\\n\\n    /// @dev formula redeem bonds\\n    /// @param _uBOND , amount of bonding shares\\n    /// @param _currentShareValue , current share value\\n    /// @param _targetPrice , target uAD price\\n    /// @return _uLP , amount of LP tokens\\n    /// @notice _uLP = _uBOND * _currentShareValue / _targetPrice\\n    // _uLP = A * V / T\\n    function redeemBonds(\\n        uint256 _uBOND,\\n        uint256 _currentShareValue,\\n        uint256 _targetPrice\\n    ) public pure returns (uint256 _uLP) {\\n        bytes16 a = _uBOND.fromUInt();\\n        bytes16 v = _currentShareValue.fromUInt();\\n        bytes16 t = _targetPrice.fromUInt();\\n\\n        _uLP = a.mul(v).div(t).toUInt();\\n    }\\n\\n    /// @dev formula bond price\\n    /// @param _totalULP , total LP tokens\\n    /// @param _totalUBOND , total bond shares\\n    /// @param _targetPrice ,  target uAD price\\n    /// @return _priceUBOND , bond share price\\n    /// @notice\\n    // IF _totalUBOND = 0  priceBOND = TARGET_PRICE\\n    // ELSE                priceBOND = totalLP / totalShares * TARGET_PRICE\\n    // R = T == 0 ? 1 : LP / S\\n    // P = R * T\\n    function bondPrice(\\n        uint256 _totalULP,\\n        uint256 _totalUBOND,\\n        uint256 _targetPrice\\n    ) public pure returns (uint256 _priceUBOND) {\\n        bytes16 lp = _totalULP.fromUInt();\\n        bytes16 s = _totalUBOND.fromUInt();\\n        bytes16 r = _totalUBOND == 0 ? uint256(1).fromUInt() : lp.div(s);\\n        bytes16 t = _targetPrice.fromUInt();\\n\\n        _priceUBOND = r.mul(t).toUInt();\\n    }\\n\\n    /// @dev formula ugov multiply\\n    /// @param _multiplier , initial ugov min multiplier\\n    /// @param _price , current share price\\n    /// @return _newMultiplier , new ugov min multiplier\\n    /// @notice new_multiplier = multiplier * ( 1.05 / (1 + abs( 1 - price ) ) )\\n    // nM = M * C / A\\n    // A = ( 1 + abs( 1 - P)))\\n    // 5 >= multiplier >= 0.2\\n    function ugovMultiply(uint256 _multiplier, uint256 _price)\\n        public\\n        pure\\n        returns (uint256 _newMultiplier)\\n    {\\n        bytes16 m = _multiplier.fromUInt();\\n        bytes16 p = _price.fromUInt();\\n        bytes16 c = uint256(105 * 1e16).fromUInt(); // 1.05\\n        bytes16 u = uint256(1e18).fromUInt(); // 1\\n        bytes16 a = u.add(u.sub(p).abs()); // 1 + abs( 1 - P )\\n\\n        _newMultiplier = m.mul(c).div(a).toUInt(); // nM = M * C / A\\n\\n        // 5 >= multiplier >= 0.2\\n        if (_newMultiplier > 5e18 || _newMultiplier < 2e17)\\n            _newMultiplier = _multiplier;\\n    }\\n}\\n\",\"keccak256\":\"0xd4c935542af210b909d008d154146d8d1e36afee2f91aa628cd493392232db22\",\"license\":\"MIT\"},\"contracts/libs/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n    /*\\n     * 0.\\n     */\\n    bytes16 private constant _POSITIVE_ZERO =\\n        0x00000000000000000000000000000000;\\n\\n    /*\\n     * -0.\\n     */\\n    bytes16 private constant _NEGATIVE_ZERO =\\n        0x80000000000000000000000000000000;\\n\\n    /*\\n     * +Infinity.\\n     */\\n    bytes16 private constant _POSITIVE_INFINITY =\\n        0x7FFF0000000000000000000000000000;\\n\\n    /*\\n     * -Infinity.\\n     */\\n    bytes16 private constant _NEGATIVE_INFINITY =\\n        0xFFFF0000000000000000000000000000;\\n\\n    /*\\n     * Canonical NaN value.\\n     */\\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n    /**\\n     * Convert signed 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromInt(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16383 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 256-bit integer number\\n     * rounding towards zero.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 256-bit integer number\\n     */\\n    function toInt(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16638); // Overflow\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            uint256 result =\\n                (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(\\n                    result <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    result <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                uint256 result = x;\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16383 + msb) << 112);\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into unsigned 256-bit integer number\\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n     * without error, because they are rounded to zero.\\n     *\\n     * @param x quadruple precision number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function toUInt(bytes16 x) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\\n\\n            require(exponent <= 16638); // Overflow\\n            uint256 result =\\n                (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 128.128 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from128x128(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16255 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 128.128 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 128.128 bit fixed point number\\n     */\\n    function to128x128(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16510); // Overflow\\n            if (exponent < 16255) return 0; // Underflow\\n\\n            uint256 result =\\n                (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    0x10000000000000000000000000000;\\n\\n            if (exponent < 16367) result >>= 16367 - exponent;\\n            else if (exponent > 16367) result <<= exponent - 16367;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(\\n                    result <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    result <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 64.64 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from64x64(int128 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint128(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16319 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 64.64 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 64.64 bit fixed point number\\n     */\\n    function to64x64(bytes16 x) internal pure returns (int128) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16446); // Overflow\\n            if (exponent < 16319) return 0; // Underflow\\n\\n            uint256 result =\\n                (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    0x10000000000000000000000000000;\\n\\n            if (exponent < 16431) result >>= 16431 - exponent;\\n            else if (exponent > 16431) result <<= exponent - 16431;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x80000000000000000000000000000000);\\n                return -int128(int256(result)); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(int256(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert octuple precision number into quadruple precision number.\\n     *\\n     * @param x octuple precision number\\n     * @return quadruple precision number\\n     */\\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool negative =\\n                x &\\n                    0x8000000000000000000000000000000000000000000000000000000000000000 >\\n                    0;\\n\\n            uint256 exponent = (uint256(x) >> 236) & 0x7FFFF;\\n            uint256 significand =\\n                uint256(x) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFFF) {\\n                if (significand > 0) return NaN;\\n                else return negative ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n            }\\n\\n            if (exponent > 278526)\\n                return negative ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n            else if (exponent < 245649)\\n                return negative ? _NEGATIVE_ZERO : _POSITIVE_ZERO;\\n            else if (exponent < 245761) {\\n                significand =\\n                    (significand |\\n                        0x100000000000000000000000000000000000000000000000000000000000) >>\\n                    (245885 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 124;\\n                exponent -= 245760;\\n            }\\n\\n            uint128 result = uint128(significand | (exponent << 112));\\n            if (negative) result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into octuple precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return octuple precision number\\n     */\\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF)\\n                exponent = 0x7FFFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result =\\n                        (result << (236 - msb)) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 245649 + msb;\\n                }\\n            } else {\\n                result <<= 124;\\n                exponent += 245760;\\n            }\\n\\n            result |= exponent << 236;\\n            if (uint128(x) >= 0x80000000000000000000000000000000)\\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n            return bytes32(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert double precision number into quadruple precision number.\\n     *\\n     * @param x double precision number\\n     * @return quadruple precision number\\n     */\\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 exponent = (uint64(x) >> 52) & 0x7FF;\\n\\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FF)\\n                exponent = 0x7FFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result =\\n                        (result << (112 - msb)) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 15309 + msb;\\n                }\\n            } else {\\n                result <<= 60;\\n                exponent += 15360;\\n            }\\n\\n            result |= exponent << 112;\\n            if (x & 0x8000000000000000 > 0)\\n                result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(uint128(result));\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into double precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return double precision number\\n     */\\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\\n        unchecked {\\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\\n\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                if (significand > 0) return 0x7FF8000000000000;\\n                // NaN\\n                else\\n                    return\\n                        negative\\n                            ? bytes8(0xFFF0000000000000) // -Infinity\\n                            : bytes8(0x7FF0000000000000); // Infinity\\n            }\\n\\n            if (exponent > 17406)\\n                return\\n                    negative\\n                        ? bytes8(0xFFF0000000000000) // -Infinity\\n                        : bytes8(0x7FF0000000000000);\\n            // Infinity\\n            else if (exponent < 15309)\\n                return\\n                    negative\\n                        ? bytes8(0x8000000000000000) // -0\\n                        : bytes8(0x0000000000000000);\\n            // 0\\n            else if (exponent < 15361) {\\n                significand =\\n                    (significand | 0x10000000000000000000000000000) >>\\n                    (15421 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 60;\\n                exponent -= 15360;\\n            }\\n\\n            uint64 result = uint64(significand | (exponent << 52));\\n            if (negative) result |= 0x8000000000000000;\\n\\n            return bytes8(result);\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is NaN, false otherwise\\n     */\\n    function isNaN(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n                0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is positive or negative\\n     * infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is positive or negative infinity, false otherwise\\n     */\\n    function isInfinity(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n                0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return sign of x\\n     */\\n    function sign(bytes16 x) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            if (absoluteX == 0) return 0;\\n            else if (uint128(x) >= 0x80000000000000000000000000000000)\\n                return -1;\\n            else return 1;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n     * arguments are infinities of the same sign.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return sign (x - y)\\n     */\\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            // Not infinities of the same sign\\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n            if (x == y) return 0;\\n            else {\\n                bool negativeX =\\n                    uint128(x) >= 0x80000000000000000000000000000000;\\n                bool negativeY =\\n                    uint128(y) >= 0x80000000000000000000000000000000;\\n\\n                if (negativeX) {\\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\\n                    else return -1;\\n                } else {\\n                    if (negativeY) return 1;\\n                    else return absoluteX > absoluteY ? int8(1) : -1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n     * anything.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return true if x equals to y, false otherwise\\n     */\\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\\n        unchecked {\\n            if (x == y) {\\n                return\\n                    uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n                    0x7FFF0000000000000000000000000000;\\n            } else return false;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Special values behave in the following way:\\n     *\\n     * NaN + x = NaN for any x.\\n     * Infinity + x = Infinity for any finite x.\\n     * -Infinity + x = -Infinity for any finite x.\\n     * Infinity + Infinity = Infinity.\\n     * -Infinity + -Infinity = -Infinity.\\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x;\\n                    else return NaN;\\n                } else return x;\\n            } else if (yExponent == 0x7FFF) return y;\\n            else {\\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\\n                uint256 xSignifier =\\n                    uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\\n                uint256 ySignifier =\\n                    uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                if (xSignifier == 0)\\n                    return y == _NEGATIVE_ZERO ? _POSITIVE_ZERO : y;\\n                else if (ySignifier == 0)\\n                    return x == _NEGATIVE_ZERO ? _POSITIVE_ZERO : x;\\n                else {\\n                    int256 delta = int256(xExponent) - int256(yExponent);\\n\\n                    if (xSign == ySign) {\\n                        if (delta > 112) return x;\\n                        else if (delta > 0) ySignifier >>= uint256(delta);\\n                        else if (delta < -112) return y;\\n                        else if (delta < 0) {\\n                            xSignifier >>= uint256(-delta);\\n                            xExponent = yExponent;\\n                        }\\n\\n                        xSignifier += ySignifier;\\n\\n                        if (xSignifier >= 0x20000000000000000000000000000) {\\n                            xSignifier >>= 1;\\n                            xExponent += 1;\\n                        }\\n\\n                        if (xExponent == 0x7FFF)\\n                            return\\n                                xSign ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n                        else {\\n                            if (xSignifier < 0x10000000000000000000000000000)\\n                                xExponent = 0;\\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (\\n                                            xSign\\n                                                ? 0x80000000000000000000000000000000\\n                                                : 0\\n                                        ) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                        }\\n                    } else {\\n                        if (delta > 0) {\\n                            xSignifier <<= 1;\\n                            xExponent -= 1;\\n                        } else if (delta < 0) {\\n                            ySignifier <<= 1;\\n                            xExponent = yExponent - 1;\\n                        }\\n\\n                        if (delta > 112) ySignifier = 1;\\n                        else if (delta > 1)\\n                            ySignifier =\\n                                ((ySignifier - 1) >> uint256(delta - 1)) +\\n                                1;\\n                        else if (delta < -112) xSignifier = 1;\\n                        else if (delta < -1)\\n                            xSignifier =\\n                                ((xSignifier - 1) >> uint256(-delta - 1)) +\\n                                1;\\n\\n                        if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n                        else {\\n                            xSignifier = ySignifier - xSignifier;\\n                            xSign = ySign;\\n                        }\\n\\n                        if (xSignifier == 0) return _POSITIVE_ZERO;\\n\\n                        uint256 msb = mostSignificantBit(xSignifier);\\n\\n                        if (msb == 113) {\\n                            xSignifier =\\n                                (xSignifier >> 1) &\\n                                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                            xExponent += 1;\\n                        } else if (msb < 112) {\\n                            uint256 shift = 112 - msb;\\n                            if (xExponent > shift) {\\n                                xSignifier =\\n                                    (xSignifier << shift) &\\n                                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                                xExponent -= shift;\\n                            } else {\\n                                xSignifier <<= xExponent - 1;\\n                                xExponent = 0;\\n                            }\\n                        } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                        if (xExponent == 0x7FFF)\\n                            return\\n                                xSign ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n                        else\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (\\n                                            xSign\\n                                                ? 0x80000000000000000000000000000000\\n                                                : 0\\n                                        ) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Special values behave in the following way:\\n     *\\n     * NaN - x = NaN for any x.\\n     * Infinity - x = Infinity for any finite x.\\n     * -Infinity - x = -Infinity for any finite x.\\n     * Infinity - -Infinity = Infinity.\\n     * -Infinity - Infinity = -Infinity.\\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {return add(x, y ^ 0x80000000000000000000000000000000);}\\n    }\\n\\n    /**\\n     * Calculate x * y.  Special values behave in the following way:\\n     *\\n     * NaN * x = NaN for any x.\\n     * Infinity * x = Infinity for any finite positive x.\\n     * Infinity * x = -Infinity for any finite negative x.\\n     * -Infinity * x = -Infinity for any finite positive x.\\n     * -Infinity * x = Infinity for any finite negative x.\\n     * Infinity * 0 = NaN.\\n     * -Infinity * 0 = NaN.\\n     * Infinity * Infinity = Infinity.\\n     * Infinity * -Infinity = -Infinity.\\n     * -Infinity * Infinity = -Infinity.\\n     * -Infinity * -Infinity = Infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y)\\n                        return x ^ (y & 0x80000000000000000000000000000000);\\n                    else if (x ^ y == 0x80000000000000000000000000000000)\\n                        return x | y;\\n                    else return NaN;\\n                } else {\\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                    else return x ^ (y & 0x80000000000000000000000000000000);\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return y ^ (x & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 xSignifier =\\n                    uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 ySignifier =\\n                    uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                xSignifier *= ySignifier;\\n                if (xSignifier == 0)\\n                    return\\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\\n                            ? _NEGATIVE_ZERO\\n                            : _POSITIVE_ZERO;\\n\\n                xExponent += yExponent;\\n\\n                uint256 msb =\\n                    xSignifier >=\\n                        0x200000000000000000000000000000000000000000000000000000000\\n                        ? 225\\n                        : xSignifier >=\\n                            0x100000000000000000000000000000000000000000000000000000000\\n                        ? 224\\n                        : mostSignificantBit(xSignifier);\\n\\n                if (xExponent + msb < 16496) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb < 16608) {\\n                    // Subnormal\\n                    if (xExponent < 16496) xSignifier >>= 16496 - xExponent;\\n                    else if (xExponent > 16496)\\n                        xSignifier <<= xExponent - 16496;\\n                    xExponent = 0;\\n                } else if (xExponent + msb > 49373) {\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else {\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n                    else if (msb < 112) xSignifier <<= 112 - msb;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb - 16607;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(\\n                            uint128(\\n                                (x ^ y) & 0x80000000000000000000000000000000\\n                            ) |\\n                                (xExponent << 112) |\\n                                xSignifier\\n                        )\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y.  Special values behave in the following way:\\n     *\\n     * NaN / x = NaN for any x.\\n     * x / NaN = NaN for any x.\\n     * Infinity / x = Infinity for any finite non-negative x.\\n     * Infinity / x = -Infinity for any finite negative x including -0.\\n     * -Infinity / x = -Infinity for any finite non-negative x.\\n     * -Infinity / x = Infinity for any finite negative x including -0.\\n     * x / Infinity = 0 for any finite non-negative x.\\n     * x / -Infinity = -0 for any finite non-negative x.\\n     * x / Infinity = -0 for any finite non-negative x including -0.\\n     * x / -Infinity = 0 for any finite non-negative x including -0.\\n     *\\n     * Infinity / Infinity = NaN.\\n     * Infinity / -Infinity = -NaN.\\n     * -Infinity / Infinity = -NaN.\\n     * -Infinity / -Infinity = NaN.\\n     *\\n     * Division by zero behaves in the following way:\\n     *\\n     * x / 0 = Infinity for any finite positive x.\\n     * x / -0 = -Infinity for any finite positive x.\\n     * x / 0 = -Infinity for any finite negative x.\\n     * x / -0 = Infinity for any finite negative x.\\n     * 0 / 0 = NaN.\\n     * 0 / -0 = NaN.\\n     * -0 / 0 = NaN.\\n     * -0 / -0 = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) return NaN;\\n                else return x ^ (y & 0x80000000000000000000000000000000);\\n            } else if (yExponent == 0x7FFF) {\\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n                else\\n                    return\\n                        _POSITIVE_ZERO |\\n                        ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else\\n                    return\\n                        _POSITIVE_INFINITY |\\n                        ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 ySignifier =\\n                    uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 xSignifier =\\n                    uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) {\\n                    if (xSignifier != 0) {\\n                        uint256 shift = 226 - mostSignificantBit(xSignifier);\\n\\n                        xSignifier <<= shift;\\n\\n                        xExponent = 1;\\n                        yExponent += shift - 114;\\n                    }\\n                } else {\\n                    xSignifier =\\n                        (xSignifier | 0x10000000000000000000000000000) <<\\n                        114;\\n                }\\n\\n                xSignifier = xSignifier / ySignifier;\\n                if (xSignifier == 0)\\n                    return\\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\\n                            ? _NEGATIVE_ZERO\\n                            : _POSITIVE_ZERO;\\n\\n                assert(xSignifier >= 0x1000000000000000000000000000);\\n\\n                uint256 msb =\\n                    xSignifier >= 0x80000000000000000000000000000\\n                        ? mostSignificantBit(xSignifier)\\n                        : xSignifier >= 0x40000000000000000000000000000\\n                        ? 114\\n                        : xSignifier >= 0x20000000000000000000000000000\\n                        ? 113\\n                        : 112;\\n\\n                if (xExponent + msb > yExponent + 16497) {\\n                    // Overflow\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16380 < yExponent) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16268 < yExponent) {\\n                    // Subnormal\\n                    if (xExponent + 16380 > yExponent)\\n                        xSignifier <<= xExponent + 16380 - yExponent;\\n                    else if (xExponent + 16380 < yExponent)\\n                        xSignifier >>= yExponent - xExponent - 16380;\\n\\n                    xExponent = 0;\\n                } else {\\n                    // Normal\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb + 16269 - yExponent;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(\\n                            uint128(\\n                                (x ^ y) & 0x80000000000000000000000000000000\\n                            ) |\\n                                (xExponent << 112) |\\n                                xSignifier\\n                        )\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function neg(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {return x ^ 0x80000000000000000000000000000000;}\\n    }\\n\\n    /**\\n     * Calculate |x|.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function abs(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;}\\n    }\\n\\n    /**\\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier =\\n                        uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return _POSITIVE_ZERO;\\n\\n                    bool oddExponent = xExponent & 0x1 == 0;\\n                    xExponent = (xExponent + 16383) >> 1;\\n\\n                    if (oddExponent) {\\n                        if (xSignifier >= 0x10000000000000000000000000000)\\n                            xSignifier <<= 113;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (226 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    } else {\\n                        if (xSignifier >= 0x10000000000000000000000000000)\\n                            xSignifier <<= 112;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (225 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    }\\n\\n                    uint256 r = 0x10000000000000000000000000000;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n                    uint256 r1 = xSignifier / r;\\n                    if (r1 < r) r = r1;\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (xExponent << 112) |\\n                                    (r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function log_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else if (x == 0x3FFF0000000000000000000000000000)\\n                return _POSITIVE_ZERO;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier =\\n                        uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return _NEGATIVE_INFINITY;\\n\\n                    bool resultNegative;\\n                    uint256 resultExponent = 16495;\\n                    uint256 resultSignifier;\\n\\n                    if (xExponent >= 0x3FFF) {\\n                        resultNegative = false;\\n                        resultSignifier = xExponent - 0x3FFF;\\n                        xSignifier <<= 15;\\n                    } else {\\n                        resultNegative = true;\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            resultSignifier = 0x3FFE - xExponent;\\n                            xSignifier <<= 15;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            resultSignifier = 16493 - msb;\\n                            xSignifier <<= 127 - msb;\\n                        }\\n                    }\\n\\n                    if (xSignifier == 0x80000000000000000000000000000000) {\\n                        if (resultNegative) resultSignifier += 1;\\n                        uint256 shift =\\n                            112 - mostSignificantBit(resultSignifier);\\n                        resultSignifier <<= shift;\\n                        resultExponent -= shift;\\n                    } else {\\n                        uint256 bb = resultNegative ? 1 : 0;\\n                        while (\\n                            resultSignifier < 0x10000000000000000000000000000\\n                        ) {\\n                            resultSignifier <<= 1;\\n                            resultExponent -= 1;\\n\\n                            xSignifier *= xSignifier;\\n                            uint256 b = xSignifier >> 255;\\n                            resultSignifier += b ^ bb;\\n                            xSignifier >>= 127 + b;\\n                        }\\n                    }\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (\\n                                    resultNegative\\n                                        ? 0x80000000000000000000000000000000\\n                                        : 0\\n                                ) |\\n                                    (resultExponent << 112) |\\n                                    (resultSignifier &\\n                                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function ln(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);}\\n    }\\n\\n    /**\\n     * Calculate 2^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n            else if (xExponent > 16397)\\n                return xNegative ? _POSITIVE_ZERO : _POSITIVE_INFINITY;\\n            else if (xExponent < 16255)\\n                return 0x3FFF0000000000000000000000000000;\\n            else {\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                if (xExponent > 16367) xSignifier <<= xExponent - 16367;\\n                else if (xExponent < 16367) xSignifier >>= 16367 - xExponent;\\n\\n                if (\\n                    xNegative &&\\n                    xSignifier > 0x406E00000000000000000000000000000000\\n                ) return _POSITIVE_ZERO;\\n\\n                if (\\n                    !xNegative &&\\n                    xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                ) return _POSITIVE_INFINITY;\\n\\n                uint256 resultExponent = xSignifier >> 128;\\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xNegative && xSignifier != 0) {\\n                    xSignifier = ~xSignifier;\\n                    resultExponent += 1;\\n                }\\n\\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\\n                if (xSignifier & 0x80000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x16A09E667F3BCC908B2FB1366EA957D3E) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1306FE0A31B7152DE8D5A46305C85EDEC) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1172B83C7D517ADCDF7C8C50EB14A791F) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10B5586CF9890F6298B92B71842A98363) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1059B0D31585743AE7C548EB68CA417FD) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x102C9A3E778060EE6F7CACA4F7A29BDE8) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10163DA9FB33356D84A66AE336DCDFA3F) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100B1AFA5ABCBED6129AB13EC11DC9543) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10058C86DA1C09EA1FF19D294CF2F679B) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1002C605E2E8CEC506D21BFC89A23A00F) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100162F3904051FA128BCA9C55C31E5DF) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000B175EFFDC76BA38E31671CA939725) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100058BA01FB9F96D6CACD4B180917C3D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10002C5CC37DA9491D0985C348C68E7B3) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000162E525EE054754457D5995292026) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000B17255775C040618BF4A4ADE83FC) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000162E43F4F831060E02D839A9D16D) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000B1721BCFC99D9F890EA06911763) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000058B90CF1E6D97F9CA14DBCC1628) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000002C5C863B73F016468F6BAC5CA2B) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000162E430E5A18F6119E3C02282A5) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000B1721835514B86E6D96EFD1BFE) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000058B90C0B48C6BE5DF846C5B2EF) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000002C5C8601CC6B9E94213C72737A) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000162E42FFF037DF38AA2B219F06) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000B17217FBA9C739AA5819F44F9) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000058B90BFCDEE5ACD3C1CEDC823) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000002C5C85FE31F35A6A30DA1BE50) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000162E42FF0999CE3541B9FFFCF) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000B17217F80F4EF5AADDA45554) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000058B90BFBF8479BD5A81B51AD) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000002C5C85FDF84BD62AE30A74CC) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000162E42FEFB2FED257559BDAA) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000B17217F7D5A7716BBA4A9AE) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000058B90BFBE9DDBAC5E109CCE) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000002C5C85FDF4B15DE6F17EB0D) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000162E42FEFA494F1478FDE05) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000B17217F7D20CF927C8E94C) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000058B90BFBE8F71CB4E4B33D) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000002C5C85FDF477B662B26945) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000162E42FEFA3AE53369388C) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000B17217F7D1D351A389D40) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000058B90BFBE8E8B2D3D4EDE) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000002C5C85FDF4741BEA6E77E) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000162E42FEFA39FE95583C2) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000B17217F7D1CFB72B45E1) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000058B90BFBE8E7CC35C3F0) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000002C5C85FDF473E242EA38) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000162E42FEFA39F02B772C) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000B17217F7D1CF7D83C1A) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000058B90BFBE8E7BDCBE2E) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000002C5C85FDF473DEA871F) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000162E42FEFA39EF44D91) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000B17217F7D1CF79E949) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000058B90BFBE8E7BCE544) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000002C5C85FDF473DE6ECA) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000162E42FEFA39EF366F) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000B17217F7D1CF79AFA) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000058B90BFBE8E7BCD6D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000002C5C85FDF473DE6B2) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000162E42FEFA39EF358) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000B17217F7D1CF79AB) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000058B90BFBE8E7BCD5) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000002C5C85FDF473DE6A) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000162E42FEFA39EF34) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000B17217F7D1CF799) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000058B90BFBE8E7BCC) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000002C5C85FDF473DE5) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000162E42FEFA39EF2) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000B17217F7D1CF78) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000058B90BFBE8E7BB) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000002C5C85FDF473DD) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000162E42FEFA39EE) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000B17217F7D1CF6) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000058B90BFBE8E7A) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000002C5C85FDF473C) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000162E42FEFA39D) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000B17217F7D1CE) >>\\n                        128;\\n                if (xSignifier & 0x800000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000058B90BFBE8E6) >>\\n                        128;\\n                if (xSignifier & 0x400000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000002C5C85FDF472) >>\\n                        128;\\n                if (xSignifier & 0x200000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000162E42FEFA38) >>\\n                        128;\\n                if (xSignifier & 0x100000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000B17217F7D1B) >>\\n                        128;\\n                if (xSignifier & 0x80000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000058B90BFBE8D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000002C5C85FDF46) >>\\n                        128;\\n                if (xSignifier & 0x20000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000162E42FEFA2) >>\\n                        128;\\n                if (xSignifier & 0x10000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000B17217F7D0) >>\\n                        128;\\n                if (xSignifier & 0x8000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000058B90BFBE7) >>\\n                        128;\\n                if (xSignifier & 0x4000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000002C5C85FDF3) >>\\n                        128;\\n                if (xSignifier & 0x2000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000162E42FEF9) >>\\n                        128;\\n                if (xSignifier & 0x1000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000B17217F7C) >>\\n                        128;\\n                if (xSignifier & 0x800000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000058B90BFBD) >>\\n                        128;\\n                if (xSignifier & 0x400000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000002C5C85FDE) >>\\n                        128;\\n                if (xSignifier & 0x200000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000162E42FEE) >>\\n                        128;\\n                if (xSignifier & 0x100000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000B17217F6) >>\\n                        128;\\n                if (xSignifier & 0x80000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000058B90BFA) >>\\n                        128;\\n                if (xSignifier & 0x40000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000002C5C85FC) >>\\n                        128;\\n                if (xSignifier & 0x20000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000162E42FD) >>\\n                        128;\\n                if (xSignifier & 0x10000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000B17217E) >>\\n                        128;\\n                if (xSignifier & 0x8000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000058B90BE) >>\\n                        128;\\n                if (xSignifier & 0x4000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000002C5C85E) >>\\n                        128;\\n                if (xSignifier & 0x2000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000162E42E) >>\\n                        128;\\n                if (xSignifier & 0x1000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000B17216) >>\\n                        128;\\n                if (xSignifier & 0x800000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000058B90A) >>\\n                        128;\\n                if (xSignifier & 0x400000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000002C5C84) >>\\n                        128;\\n                if (xSignifier & 0x200000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000162E41) >>\\n                        128;\\n                if (xSignifier & 0x100000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000B1720) >>\\n                        128;\\n                if (xSignifier & 0x80000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000058B8F) >>\\n                        128;\\n                if (xSignifier & 0x40000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000002C5C7) >>\\n                        128;\\n                if (xSignifier & 0x20000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000162E3) >>\\n                        128;\\n                if (xSignifier & 0x10000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000B171) >>\\n                        128;\\n                if (xSignifier & 0x8000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000058B8) >>\\n                        128;\\n                if (xSignifier & 0x4000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000002C5B) >>\\n                        128;\\n                if (xSignifier & 0x2000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000162D) >>\\n                        128;\\n                if (xSignifier & 0x1000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000B16) >>\\n                        128;\\n                if (xSignifier & 0x800 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000058A) >>\\n                        128;\\n                if (xSignifier & 0x400 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000002C4) >>\\n                        128;\\n                if (xSignifier & 0x200 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000161) >>\\n                        128;\\n                if (xSignifier & 0x100 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000000B0) >>\\n                        128;\\n                if (xSignifier & 0x80 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000057) >>\\n                        128;\\n                if (xSignifier & 0x40 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000002B) >>\\n                        128;\\n                if (xSignifier & 0x20 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000015) >>\\n                        128;\\n                if (xSignifier & 0x10 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000000A) >>\\n                        128;\\n                if (xSignifier & 0x8 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000004) >>\\n                        128;\\n                if (xSignifier & 0x4 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000001) >>\\n                        128;\\n\\n                if (!xNegative) {\\n                    resultSignifier =\\n                        (resultSignifier >> 15) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent += 0x3FFF;\\n                } else if (resultExponent <= 0x3FFE) {\\n                    resultSignifier =\\n                        (resultSignifier >> 15) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent = 0x3FFF - resultExponent;\\n                } else {\\n                    resultSignifier =\\n                        resultSignifier >>\\n                        (resultExponent - 16367);\\n                    resultExponent = 0;\\n                }\\n\\n                return\\n                    bytes16(uint128((resultExponent << 112) | resultSignifier));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate e^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function exp(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));}\\n    }\\n\\n    /**\\n     * Get index of the most significant non-zero bit in binary representation of\\n     * x.  Reverts if x is zero.\\n     *\\n     * @return index of the most significant non-zero bit in binary representation\\n     *         of x\\n     */\\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            require(x > 0);\\n\\n            uint256 result = 0;\\n\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                result += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                result += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                result += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                result += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                result += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                result += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                result += 2;\\n            }\\n            if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf1ea6500a79e267f34706407d32ece0cfb98b500920d77f43d535ea267b1fbb4\",\"license\":\"BSD-4-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice(uint256,uint256,uint256)": {
        "details": "formula bond price",
        "params": {
          "_targetPrice": ",  target uAD price",
          "_totalUBOND": ", total bond shares",
          "_totalULP": ", total LP tokens"
        },
        "returns": {
          "_priceUBOND": ", bond share price"
        }
      },
      "bonding(uint256,uint256,uint256)": {
        "details": "formula bonding",
        "params": {
          "_currentShareValue": ", current share value",
          "_shares": ", amount of shares",
          "_targetPrice": ", target uAD price"
        },
        "returns": {
          "_uBOND": ", amount of bonding shares"
        }
      },
      "durationMultiply(uint256,uint256,uint256)": {
        "details": "formula duration multiply",
        "params": {
          "_multiplier": ", bonding discount multiplier = 0.0001",
          "_uLP": ", amount of LP tokens",
          "_weeks": ", mimimun duration of staking period"
        },
        "returns": {
          "_shares": ", amount of shares"
        }
      },
      "redeemBonds(uint256,uint256,uint256)": {
        "details": "formula redeem bonds",
        "params": {
          "_currentShareValue": ", current share value",
          "_targetPrice": ", target uAD price",
          "_uBOND": ", amount of bonding shares"
        },
        "returns": {
          "_uLP": ", amount of LP tokens"
        }
      },
      "ugovMultiply(uint256,uint256)": {
        "details": "formula ugov multiply",
        "params": {
          "_multiplier": ", initial ugov min multiplier",
          "_price": ", current share price"
        },
        "returns": {
          "_newMultiplier": ", new ugov min multiplier"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bonding(uint256,uint256,uint256)": {
        "notice": "UBOND = _shares / _currentShareValue * _targetPrice"
      },
      "durationMultiply(uint256,uint256,uint256)": {
        "notice": "_shares = (1 + _multiplier * _weeks^3/2) * _uLP"
      },
      "redeemBonds(uint256,uint256,uint256)": {
        "notice": "_uLP = _uBOND * _currentShareValue / _targetPrice"
      },
      "ugovMultiply(uint256,uint256)": {
        "notice": "new_multiplier = multiplier * ( 1.05 / (1 + abs( 1 - price ) ) )"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
